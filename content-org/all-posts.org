#+setupfile: setup.org
#+hugo_section: post
#+seq_todo: TODO DRAFT DONE
#+hugo_front_matter_key_replace: lastmod>mylastmod
#+hugo_front_matter_format: yaml
#+macro: unsplash @@hugo:{{< unsplash leading="$1" id="$2" name="$3" >}}@@
#+macro: pixabay @@hugo:{{< pixabay >}}$1{{< /pixabay >}}@@
#+macro: pexels @@hugo:{{< pexels leading="$1" id="$2" name="$3">}}@@
#+macro: lastmod @@hugo:{{< lastmod >}}@@
#+macro: begin_callout @@hugo:{{% callout $1 %}}@@
#+macro: end_callout @@hugo:{{% /callout %}}@@
#+macro: toc @@html:{{< toc >}}@@

* Inbox                                                                :@未分類:
:LOGBOOK:
nil:END:

** TODO =-= の歴史を知りたい
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-24
:DIR:      images/2020-01-24_hyphen-as-option
:EXPORT_HUGO_BUNDLE: 2020-01-24_hyphen-as-option
:EXPORT_HUGO_SLUG: hyphen-as-option
:END:

#+begin_src yaml :front_matter_extra t
image:
  caption: Background image by
#+end_src

https://unix.stackexchange.com/q/21852 辺りのはなし

** TODO この記事を訳す
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-23
:DIR:      images/2020-01-15_test-optional-with-xctest
:EXPORT_HUGO_BUNDLE: 2020-01-15_test-optional-with-xctest
:EXPORT_HUGO_SLUG: test-optional-with-xctest
:END:

https://www.swiftbysundell.com/articles/avoiding-force-unwrapping-in-swift-unit-tests/#sticking-with-optionals

* 雑記                                                                    :@雑記:
:PROPERTIES:
nil:END:

** DONE スーパーマリオ64 Behind Camera Anywhere とは
CLOSED: [2021-06-07 月 00:30]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2021-06-06
:DIR:      images/2021-06-06_mario64-behind-camera-anywhere
:EXPORT_HUGO_BUNDLE: 2021-06-06_mario64-behind-camera-anywhere
:EXPORT_HUGO_SLUG: mario64-behind-camera-anywhere
:END:

#+begin_src yaml :front_matter_extra t
image:
  caption: Photo by <a href="https://unsplash.com/@claudiolcastro?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Cláudio Luiz Castro</a> on <a href="https://unsplash.com/s/photos/mario-64?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
#+end_src

*** 背景

pannenkoek2012 氏( [[https://www.youtube.com/user/pannenkoek2012][メインチャンネル]] , [[https://www.youtube.com/user/pannenkeok2012][セカンダリチャンネル]] ) の上げているマリオ 64 動画
( 極力 A ボタンを押さないプレイ、いわゆる A Button Challenge, ABC の方 )が好きで、ちょくちょく動画を拝見している。

さる 2021 年 5 月 3 日に新たな動画が投稿されており、何やら新たなテクニックを活用されているようだった:

{{< youtube BMwzx6NCUOs >}}

説明文から参照されている先を見ると、 *Behind Camera Anywhere* というモノらしい:

{{< youtube C38He-OUAYk >}}

ABC の新たな展開に備え、このテクニックを理解しようと考えた。

#+toc: headlines 2

*** 前提知識

Behind Camera Anywhere は、 HOLP 固定手法の一つである。

HOLP については [[https://trap.jp/post/555/][スーパーマリオ64学入門【アドベントカレンダー2018　32日目】 | 東京工業大学デジタル創作同好会traP]]  が詳しい。

簡単に説明しておくと、まず HOLP とは Held Object's Last Place 、
つまりマリオが手に持ったオブジェクトの最終位置のこと。

通常はマリオの移動と共に更新され続けるが、
何らかの理由でマリオがレンダリングされていない場合等には
HOLP が更新されずに以前の値のままになるという性質があり、
この性質を利用することを *HOLP 固定* と呼ぶ。

pannenkoek2012 氏による以下の動画でも解説されている:

{{< youtube pHihyGlYfSw >}}

また、 *HOLP はワールドをまたいでもリセットされない* という性質もある。

この性質と、オブジェクトの消滅と保持をほぼ同時に発生させることで、
ワールド中にロードされるほぼ任意のオブジェクト(のクローン)をマリオに持たせられる技、
いわゆる *無を取得* との合わせ技が ABC ではよく使われる。

例えば、ポールから降りる際の A ボタン入力を回避する為に、
降りたい地点に敵オブジェクトを配置することでヒットバックを発生させ、無理矢理降りる、等である。

*** Behind Camera Anywhere

マリオを画面外に追いやることでレンダリングを回避し、
結果 HOLP を固定出来ること自体は [[https://www.youtube.com/watch?v=pHihyGlYfSw][先程の動画]] の公開時点(2016 年)で発見されていたものの、
その条件である「マリオを画面外に追いやる」手法が確立されていなかった。

今回発見された Behind Camera Anywhere ではその名の通り、どこでもカメラの後ろに回れる、
つまり *(ほぼ)任意の場所でマリオを画面外に追いやれる* ようになったのである。

これまでの HOLP 固定は、 [[https://www.youtube.com/watch?v=pHihyGlYfSw][先程の動画]] でも紹介されているポーズバッファリングを用いたヒットスタン
(Pause Buffered Hitstun, PBH) を利用する方法が主流だった。

PBH を簡単に説明すると、被弾時の点滅状態に於いて、
ゲーム内タイマーの値が偶数の場合のみマリオがレンダリングされること、
及びポーズ中でも該当タイマーの値は進み続けることを利用し、
適当な間隔でポーズを連打することで、
被弾無敵時間が持続する限り一切のレンダリングを避け、
結果として HOLP を固定する、という技である。

PBH を利用するには必ず被弾する為の敵が必要になるが、
一方で今回の Behind Camera Anywhere ではそれが不要になる。

とはいえ [[https://www.youtube.com/watch?v=C38He-OUAYk][発見元の動画]] 説明文にもある通り、
画面外を維持したまま出来る操作というのは限られており、
必ずしも PBH の代替手段とはならないのだそう。

この手法にもそれなりの制限があるということではあるが、
新たな HOLP 固定手法として今後活用される機会は増えていくかもしれない。

*** 終わりに

筆者自身はプレイするでも、解析するでもなく、
氏の解説動画を観て分かった気になっているだけである。

その為、本記事の内容には誤りがある可能性もある。

是非、各位自身の目で、氏による懇切丁寧な解説動画を確認し、
奥深いスーパーマリオ 64 A ボタンチャレンジの世界に飛び込んで頂きたい。

*** リンク集

- [[https://www.youtube.com/user/pannenkoek2012][pannenkoek2012 氏のメインチャンネル]]
- [[https://www.youtube.com/user/pannenkeok2012][pannenkoek2012 氏のセカンダリチャンネル]]
- [[https://trap.jp/post/555/][スーパーマリオ64学入門【アドベントカレンダー2018　32日目】 | 東京工業大学デジタル創作同好会traP]]

** DONE 久々の更新                                            :emacs:hugo:ox_hugo:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 2020-01-02_happy_new_year
:EXPORT_HUGO_SLUG: happy-new-year
:EXPORT_DATE: 2020-01-02
:EXPORT_HUGO_ALIASES: /2019/01/happy-new-year/
:END:

最近仕事用のmacを新調して環境を作り直す機会があったことと、 2020 年が始まるということもあり、久々にサイトを更新することにした。

[[file:/cv/][オープン職務経歴書]]を書きたかった、というのもある。

更新にあたっていくつか困難があった。

*まず、このサイトのソースが最近の Hugo では動かせなくなっていた。*

このサイトのテーマには [[https://github.com/digitalcraftsman/hugo-icarus-theme][Icarus]] を使わせていただいているのだが、最終更新が 2017 年となっており、
Hugo 0.55.0 以降で動かなくなってしまっていたり、 Deprecated Warning が出るようになっていた。

[[https://github.com/digitalcraftsman/hugo-icarus-theme/pull/124][PRは出されている]] のだけれど、マージされる様子が無い。

そもそも、当時のバージョンに対してカスタマイズしたレイアウトを作ってしまったので、
単純なテーマの更新だけでは追随できない。

どのバージョンなら動くのか突き止めるのも骨が折れた。
[[https://bitbucket.org/mgladdish/asdf-gohugo][asdf-gohugo]] を入れて、少しずつバージョンを上げながら確認していった。

#+begin_src sh
asdf plugin add hugo https://bitbucket.org/mgladdish/asdf-gohugo
#+end_src

*そして、そもそも Hugo の使い方を忘れていた。*

[[file:/2016/02/02/blog-with-hugo/][Hugo 導入記事]] や [[file:/2016/01/26/hugo-el/][Hugo 用 Emacs ライブラリ]] を書いておいてなんだが、当時から3年も経ってほとんど忘れてしまっていた。

そこで改めて調べてみると、イマドキは org-mode で書くことも出来るらしい。

この3年ですっかり org-mode 無しでは生きられない体になってしまっていたし、
せっかくなので本記事からは [[https://ox-hugo.scripter.co/][ox-hugo]] を使って書くことにする。

使い始めるにあたって色々調べたり考えたりすることも多かったので、そのうち記事にしようと思う。
結論としては、org-mode と Hugo の組み合わせは最高だし、その橋渡しをしてくれる [[https://ox-hugo.scripter.co/][ox-hugo]] は本当にグッジョブだということ。

...

そんなこんなで色々対応していたものの、デプロイする仕組みなどは当時と変わりなく動いたのでその点は助かった。

org-mode で書けるようになったことだし、少しは記事を書いていきたい所だが、まずは Hugo の最新版に追従する作業が待っている…。

** DONE #MadeWithAcademic                                  :academic:ox_hugo:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 2020-01-06_academic
:EXPORT_HUGO_SLUG: made-with-academic
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-06
:EXPORT_HUGO_ALIASES: /2019/01/made-with-academic/
:END:

[[https://github.com/digitalcraftsman/hugo-icarus-theme][Icarus]] がメンテされておらず Hugo 0.55.0 以降で正しく動かなくなっていたので、
自力で Icarus にパッチを充てるか、別のテーマに乗り換えるかという選択を迫られていた。

せっかくなのでランディングページとブログを別にしたかったので、そういう柔軟性を備えている
[[https://sourcethemes.com/academic/][Academic]] というテーマを使うことにした。

テーマの変更にあたって様々な知見が得られたので、そのうち記事にしたい。

以下その候補:

- [[https://gohugo.io/content-management/page-bundles/][Page Bundles]] への移行
- [[https://ox-hugo.scripter.co/doc/why-ox-hugo/][ox-hugo]] と Academic が如何に相性がよいか
  - auto weight あたりが最高
  - =lastmod= の自動更新や [[https://ox-hugo.scripter.co/doc/custom-front-matter/#front-matter-extra][Front-matter Extra]] は Academic じゃなても最高の体験
- カスタムウィジェットの作り方
- ダークテーマ対応のシンタックスハイライトのやりかた
- conf-toml-mode を [[https://ox-hugo.scripter.co/doc/custom-front-matter/#front-matter-extra][Front-matter Extra]] で使う方法

* 買ったモノ                                                              :@買ったモノ:
** DONE Dell Latitude 3420 にメモリを増設する
CLOSED: [2022-02-19 土 21:51]
:PROPERTIES:
:EXPORT_FILE_NAME:   index
:EXPORT_DATE:        2022-02-19
:DIR:                images/2022-02-19_dell-latitude-3420-memory
:EXPORT_HUGO_BUNDLE: 2022-02-19_dell-latitude-3420-memory
:EXPORT_HUGO_SLUG:   dell-latitude-3420-memory
:END:

[[/2021/10/11/dell-latitude-3420-byo-ubuntu/][以前の記事]] で書いた [[https://japancatalog.dell.com/pd/latitude-3420.html][Dell Latitude 3420]] だが、
普段使いに支障は無いものの、本格的に開発作業をしようと思うと
いささかメモリが心許ない( 8GiB )為、メモリを増設することにした。

今回購入したのは、 [[https://amzn.to/34T6Jr1][Crucial 16GB DDR4-3200 SODIMM CT16G4SFRA32A]] 。
[[https://www.crucial.jp/compatible-upgrade-for/dell/latitude-14-(3420)][Crucial のページ]] に Latitude 3420 との互換性が謳われていたのできっと安心。

[[https://www.dell.com/support/kbdoc/ja-jp/000185381/][Dell の公式ページ]] に、分解方法の解説がある為、これに従い分解していく。

まずはサービスモードに入る必要がある。

公式ページ記載の通りに、 =B= キーを押しながら電源投入でいい…のだが、
ずっと押しっぱなしにしていると連打している扱いになるらしく、
確認画面などをすっ飛ばして直ぐ様
ビープ音を鳴らしつつサービスモードに入ってしまう。

特に問題は無いと思うのだけれど、知らないとビックリするので注意。

=B= を押しながら電源を入れ、3〜5 秒程度で離すと、
上手くいくと以下のように =OWNER TAG= という文字列が表示される。

#+attr_org: :width 300px
[[file:images/2022-02-19_dell-latitude-3420-memory/2022-02-19_21-00-38_PXL_20220218_081810718.jpg]]

更に AC アダプタの接続有無に関わらず、以下のような注意文言が表示され…

#+begin_quote
Please Remove AC Adapter

Press Any Key To Continue...
#+end_quote

#+attr_org: :width 300px
[[file:images/2022-02-19_dell-latitude-3420-memory/2022-02-19_21-02-53_PXL_20220218_081832378.jpg]]

最後に以下のような説明が出力され、
「カッカッ」とドキッとするようなビープ音が3回流れて電源が落ちる。

#+begin_quote
System Ready For Service After 3 Short Beeps (OR Wait 2 Seconds).

After The Service Is Completed,
Plug In AC And Press And Hold The Power Button For 2 Seconds
To Resume Normal Operations.

Press Any Key To Continue...
#+end_quote

#+attr_org: :width 300px
[[file:images/2022-02-19_dell-latitude-3420-memory/2022-02-19_21-03-43_PXL_20220218_081846897.jpg]]

この後、公式ページ記載の通りに底面のベースカバーのネジを外す。

そしてベースカバーを外せばいい…のだが、すんなりとはいかなかった。
どうやったら外せたのかよく分かっていないのだが、
おそらくヒンジ側中央部分の引っかかりをうまいこと外せれば、
あとは持ち上げるだけで外せる…ハズ。

上手く外せたら、以下の部分にメモリを差し込む。
元々 8GiB のが差さっているので、その反対側になる。

#+attr_org: :width 300px
[[file:images/2022-02-19_dell-latitude-3420-memory/2022-02-19_21-18-28_photo1.jpg]]

[[https://www.iodata.jp/product/memory/info/tips/#list2][メモリーの増設方法 | IODATA アイ・オー・データ機器]] 等を参考に、
斜め 35 度くらいに差し込み、奥までいったら下に押し込む。

カチッとハマッたら、再びベースカバーをネジ止めして、AC アダプタに接続する。

サービスモードに入るときの説明では、
AC アダプタ接続後に電源ボタンを押す的なことが書いてあったが、
自分の場合は接続後すぐに起動した。

起動後は以下のような画面が表示される。

#+begin_quote
Alert! The amount of system memory has changed.
#+end_quote

#+attr_org: :width 300px
[[file:images/2022-02-19_dell-latitude-3420-memory/2022-02-19_21-30-58_PXL_20220218_085238190.jpg]]

[[https://www.dell.com/support/kbdoc/ja-jp/000137726/][Dell のサポート技術文書]] によれば、無視して構わないとのこと。

#+begin_quote
メモリを増設または取り外した場合、このメッセージは単なる通知として無視して構いません
#+end_quote

以上で無事、既存の 8 GiB + 16 GiB で 24 GiB に RAM を増強出来た 🎉

#+attr_org: :width 300px
[[file:images/2022-02-19_dell-latitude-3420-memory/2022-02-19_21-41-36_screenshot.png]]


** DONE Dell Latitude 3420 - Build Your Own で Ubuntu プリインストールなノート PC を楽しむ
CLOSED: [2021-10-11 月 23:44]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2021-10-07
:DIR:      images/2021-10-07_dell-latitude-3420-byo-ubuntu
:EXPORT_HUGO_BUNDLE: 2021-10-07_dell-latitude-3420-byo-ubuntu
:EXPORT_HUGO_SLUG: dell-latitude-3420-byo-ubuntu
:EXPORT_HUGO_TAGS: dell xubuntu ubuntu xfce
:CREATED:  [2021-10-11 月 23:44]
:END:

{{{toc}}}

*** 経緯
:PROPERTIES:
:CREATED:  [2021-10-07 木 21:42]
:END:

過去には、
[[file:/2020/02/13/macbookpro10-xubuntu/][MacBook Pro (Retina, 15-inch, Mid 2012) で macOS と Xubuntu 19.10 Eoan Ermine をデュアルブートする]] や、
[[file:/2020/06/18/jumper-ezbook2-xubuntu/][中古で12,800円の激安ノートPC(Jumper Ezbook 2)にXubuntu 20.04 LTS (Focal Fossa)を入れて幸せになる]] 、
[[file:/2021/02/21/acer-spin-311-emacs/][Chromebook Acer Spin 311 に Emacs を入れて幸せになる]] に於いて、
手元の型落ち品や安価な PC を調達しての Ubuntu ノート PC 化を行なってきたが、
それなりのスペックで、 GNU/Linux 搭載前提の PC を調達したい欲が高まっていた。

そんな折、 Dell からなら Ubuntu プリインストールなノート PC を調達出来ることを
[[https://ubuntu84.blogspot.com/2020/05/dellubuntu-2020531.html][Linuxノートパソコンが買える DELL製9機種 2021/09/25更新 - 全部楽しもう]] で知ったので、
購入を決めた。

*** 調達
:PROPERTIES:
:CREATED:  [2021-10-07 木 21:40]
:END:

**** 構成
:PROPERTIES:
:CREATED:  [2021-10-07 木 21:55]
:END:

今回購入したのは、14 インチの [[https://japancatalog.dell.com/pd/latitude-3420.html][Latitude 3420]] 。

OS を *Ubuntu Linux 20.04* にし、
CPU は *Core i5-1135G7* に変更、メモリは *8 GB (1 X 8 GB) 3200MHz DDR4 非-ECC* 、
電源ユニットを *65W Type-C アダプター* に変更、
また、 *電源ボタンを指紋リーダー付き* に、
キーボードを *US 配列(バックライト付き)* にそれぞれ変更した。

なお、バックライト付きキーボードは US 配列でないと選択出来ない。
US 配列使いでよかったと思う瞬間である。

さらに奮発すると、 *タッチディスプレイにも出来る* ようだったが、
今回はそこまではやらなかった。

注文時点(2021年8月2日)では上記の構成で税抜き140,500円、クーポン適用で23,183円引きの119,426円となり、
最終的に *税込131,368円* となった。

特段、お安いワケではない。

なお重量は *1.52 kg 前後* 。

MacBook Air(M1, 2020) が 1.29 kg、
13 インチ MacBook Pro(M1, 2020) が 1.4 kg、
16 インチ MacBook Pro が 2.0 kg ということなので、
いいセン行っているのではなかろうか。

**** 配送期間
:PROPERTIES:
:CREATED:  [2021-10-07 木 22:00]
:END:

2021年8月2日に購入し、その時点では出荷予定日11月1日、到着予定が11月12日とあったが、
実際には9月8日に出荷され、9月22日に到着した。

昨今の情勢影響もあろうが、 *注文から到着まで 2ヶ月弱* かかっていたことになる。
元々の予定では3ヶ月以上待つことになっていたので、大分短縮されて有り難いことではある。

*** セットアップ
:PROPERTIES:
:CREATED:  [2021-10-07 木 21:40]
:END:

今回のポイントは *指紋認証を有効にする* 部分である。

それ以外は普通に Ubuntu をセットアップをすればのだが、
いつもは最初から Xubuntu を入れていたところ、今回は *後から Xubuntu 化* する、というのが異なる点。

**** Xubuntu 化
:PROPERTIES:
:CREATED:  [2021-10-07 木 22:26]
:END:

まずは、パッケージを最新化:

#+begin_src sh
sudo apt update -y && sudo apt upgrade -y
#+end_src

次に、 Xubuntu を入れる。

#+begin_src sh
sudo apt install -y --auto-remove xubuntu-desktop xserver-xorg-input-synaptics- light-locker-
#+end_src

Display manager は [[https://github.com/canonical/lightdm][lightdm]] を選択した。

[[https://freedesktop.org/wiki/Software/libinput/][libinput]] と競合して、ウインドウによってナチュラルスクロールが効かくなるといった弊害があるので、
[[https://cgit.freedesktop.org/xorg/driver/xf86-input-synaptics/][synaptics]] は最初から入れないようにする。

また、 [[https://docs.xfce.org/apps/screensaver/start][xfce4-screensaver]] と [[https://github.com/the-cavalry/light-locker][light-locker]] も競合するので、light-locker の方を除外する。

xfce4-screensaver のロック画面の方が、指紋認証後直ちにロック解除されるのに対し、
light-locker の方は認証後に Unlock ボタンを押下する必要がある([[https://github.com/Xubuntu/lightdm-gtk-greeter][lightdm-gtk-greeter]] と同じ挙動)という、
細かい挙動の違いがある模様。

続いて、タッチパッドのオプション設定を行う:

#+begin_src sh
sudo mkdir /etc/X11/xorg.conf.d/
sudo tee /etc/X11/xorg.conf.d/30-touchpad.conf <<EOF
Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
        Option "Tapping" "on"
        Option "TappingDrag" "on"
        Option "TappingDragLock" "on"
        Option "NaturalScrolling" "on"
        Option "DisableWhileTyping" "on"
        Option "ClickMethod" "clickfinger"
EndSection
EOF
#+end_src

オプション詳細は [[https://manned.org/libinput.4][libinput の man(4)]] を参照。

続いて、キーボード設定を行う:

#+begin_src sh
sudo localectl --no-convert set-x11-keymap us pc105 '' ctrl:nocaps
#+end_src

オプション詳細は [[https://manned.org/keyboard.5][keyboard の man(5)]] を参照。

ここまでで一旦再起動する。再起動後には Xubuntu 化されている。

#+begin_src sh
sudo reboot
#+end_src

**** 指紋認証の設定
:PROPERTIES:
:CREATED:  [2021-10-07 木 23:23]
:END:

本 PC に搭載されている指紋リーダーは以下の Goodix 製のもの:

#+begin_src sh
lsusb | grep -i goodix
#+end_src

#+begin_example
Bus 003 Device 002: ID 27c6:639c Shenzhen Goodix Technology Co.,Ltd. Goodix USB2.0 MISC
#+end_example

これは、比較的最近の [[https://gitlab.freedesktop.org/libfprint/libfprint/-/releases/v1.90.7][2020年12月にリリースされた libfprint v1.90.7]] で対応されたばかり。

[[https://launchpad.net/ubuntu/focal/+source/libfprint][Focal Fossa (20.04) 向けリリース]] での最新は 1.90.2 だったので、そのままでは使えない。

[[https://launchpad.net/ubuntu/hirsute/+source/libfprint][Hirsute Hippo (21.04) 向けリリース]] に丁度 1.90.7 が上がっていたので、これをダウンロードして使ってしまう:

#+begin_src sh
cd /tmp
wget http://launchpadlibrarian.net/530881082/libfprint-2-2_1.90.7+git20210222+tod1-0ubuntu2_amd64.deb
sudo apt install ./libfprint-2-2_1.90.7+git20210222+tod1-0ubuntu2_amd64.deb
#+end_src

インストール後、 =fprintd-enroll= を実行し、指紋を登録する。

https://askubuntu.com/a/1040609 を参考に、 =pam-auth-update= を実行し、 =/etc/pam.d/common-auth= を変更する。

このファイルは以下を実行すると分かる通り、共通設定になっている:

#+begin_src sh :results verbatim :exports both :eval no-export
rg -l '@include common-auth'  /etc/pam.d/ | column
#+end_src

#+RESULTS:
#+begin_example
/etc/pam.d/su			/etc/pam.d/sudo
/etc/pam.d/gnome-screensaver	/etc/pam.d/login
/etc/pam.d/xfce4-screensaver	/etc/pam.d/ppp
/etc/pam.d/chsh			/etc/pam.d/polkit-1
/etc/pam.d/other		/etc/pam.d/lightdm
/etc/pam.d/cups			/etc/pam.d/chfn
/etc/pam.d/cron			/etc/pam.d/gdm-password
#+end_example

#+ATTR_ORG: :width 500
[[file:images/2021-10-07_dell-latitude-3420-byo-ubuntu/2021-10-11_22-34-46_screenshot.png]]

こんな画面が表示されたら、 =Fingerprint authentication= にチェックを入れて(スペースキー押下)、 =<Ok>= する( =TAB= で項目移動出来る )。

この操作により、以下のような記述が追加されることになる:

#+begin_src sh :results verbatim :exports both :exports both :eval no-export
grep fprint -C 1 /etc/pam.d/common-auth
#+end_src

#+RESULTS:
#+begin_example
# here are the per-package modules (the "Primary" block)
auth	[success=2 default=ignore]	pam_fprintd.so max_tries=1 timeout=10 # debug
auth	[success=1 default=ignore]	pam_unix.so nullok try_first_pass
#+end_example

以上で、ログイン時や =sudo= する時など、大概の場面で指紋認証を使えるようになる。

注意点として、まず前述の通り起動後ログイン画面(greeter)では、 *認証成功後に Unlock ボタンを押下する必要がある* 。

そして、その「認証成功」のフィードバックが分かり辛い。
パスワード入力フィールドが無くなって、 Unlock 出来そうな雰囲気になったことを察知するしかない。

次に、 *キーリングのロック解除には相変わらずパスワードが必要になる* 。

これは、 [[https://gitlab.gnome.org/GNOME/gdm/-/issues/613][After login in with Fingerprint reader on Lenovo Thinkpad prompted to enter password for unlocking the Keyring (#613) · Issues · GNOME / gdm · GitLab]] で
議論されている通り、基本的にはセキュリティ上意図された挙動な模様。
起動直後の一度きりの入力で済む話ではあるので、当座は受け入れている。

また、 *指紋認証待ちである事のアピールが結構弱い* ので、タイムアウトしがちである。

例えば、 =sudo= 時は標準出力に =Place your finger on the fingerprint reader= と控えめに出力されるだけだし、
Emacs で [[https://www.gnu.org/software/tramp/#Using-su_002c-sudo_002c-doas-and-sg][TRAMP を使い root 権限でファイルを開く]] ときに至っては、何も出力されない。

以上のような多少の不都合はあるものの、目を瞑れる程度ではないかと思う。

**** その他のセットアップ
:PROPERTIES:
:CREATED:  [2021-10-11 月 23:16]
:END:

以降は、特に本機だから行うというワケではないが、記録の為に残しておく。

まず何よりも先に、キーテーマを Emacs に設定する:

#+begin_src sh
xfconf-query --channel xsettings --property /Gtk/KeyThemeName --set Emacs
#+end_src

最低限のキーボードショートカットを設定する:

#+begin_src sh
xfconf-query --channel xfce4-keyboard-shortcuts --property '/commands/custom/<Primary>minus' --create --type string --set 'xfce4-terminal --drop-down --hide-menubar --hide-toolbar --hide-scrollbar'
xfconf-query --channel xfce4-keyboard-shortcuts --property '/commands/custom/<Primary><Alt>space' --create --type string --set 'xfce4-appfinder'
xfconf-query --channel xfce4-keyboard-shortcuts --property '/commands/custom/<Primary><Shift><Alt>dollar' --create --type string --set 'xfce4-screenshooter --clipboard --region'
#+end_src

キーリピート設定を変更する:

#+begin_src sh
xfconf-query --channel keyboards --property '/Default/KeyRepeat/Delay' --create --type int --set 350
xfconf-query --channel keyboards --property '/Default/KeyRepeat/Rate' --create --type int --set 20
#+end_src

主に Emacs とコマンドライン系ツールの導入用に、 [[https://guix.gnu.org/][Guix]] を導入していく:

#+begin_src sh
sudo apt install nscd -y
sudo su -
cd /tmp/
wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh
chmod +x guix-install.sh && ./guix-install.sh
#+end_src

初回はめちゃくちゃ時間かかるので、進捗確認しやすくする為にプレゼンテーションモード(自動画面オフやロックをしない)にしておく:

#+begin_src sh
xfconf-query --channel xfce4-power-manager --property /xfce4-power-manager/presentation-mode --create --type bool --set true
#+end_src

初回アップデート & 設定:

#+begin_src sh
guix pull && \
    systemctl daemon-reload && \
    systemctl restart guix-daemon.service && \
    guix archive --authorize < /root/.config/guix/current/share/guix/bordeaux.guix.gnu.org.pub && \
    guix package -u && \
    guix install glibc-locales && \
    service lightdm restart
#+end_src

ここからは通常ユーザーでの作業。

引き続き Guix のアップデートと初期設定:

#+begin_src sh
guix pull && guix package -u
guix install glibc-locales nss-certs curl
. ~/.guix-profile/etc/profile
#+end_src

コマンドラインツール群を導入:

#+begin_src sh
guix install zsh git git:credential-libsecret rcm ripgrep fzf fasd tmux xclip direnv
. ~/.guix-profile/etc/profile
sudo apt install powerline -y
wget https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh -O ${HOME}/.fzf.zsh
git clone https://github.com/yewton/.dotfiles.git
cd .dotfiles/
RCRC=~/.dotfiles/rcrc rcup
rcup -t ubuntu
echo $(which zsh) | sudo tee -a /etc/shells
chsh -s $(which zsh)
#+end_src

ここで一旦ログアウト:

#+begin_src sh
xfce4-session-logout --logout
#+end_src

ログイン後、Git の設定を行う:

#+begin_src sh
git config --file ~/.gitconfig.local user.name yewton
git config --file ~/.gitconfig.local user.email yewton@gmail.com
git config --file ~/.gitconfig.local credential.helper = ${HOME}/.guix-profile/bin/git-credential-libsecret
#+end_src

Emacs のインストール & 設定:

#+begin_src sh
guix install coreutils findutils texinfo emacs
. ~/.guix-profile/etc/profile
sudo apt install cmigemo -y
mkdir ~/.local/share/fonts
(export VER=2.5.1 && wget https://github.com/yuru7/HackGen/releases/download/v${VER}/HackGenNerd_v${VER}.zip &&
     unzip HackGenNerd_v${VER}.zip &&
     mv ./HackGenNerd_v${VER}/*.ttf ~/.local/share/fonts/ &&
     rm -fr ./HackGenNerd_v${VER}* &&
     fc-cache -fv)
git clone https://github.com/yewton/.emacs.d.git
#+end_src

[[https://support.1password.com/install-linux/][Get the 1Password for Linux app]] に従い、 1Password のインストール:

#+begin_src sh
curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' | sudo tee /etc/apt/sources.list.d/1password.list
sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
sudo apt update && sudo apt install 1password -y
#+end_src

[[https://asdf-vm.com/][asdf]] のインストール:

#+begin_src sh
guix install gcc-toolchain readline zlib openssl libyaml
. ~/.guix-profile/etc/profile
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1
. $HOME/.asdf/asdf.sh
for i in ruby nodejs golang; do asdf plugin-add $i; done
asdf plugin-add hugo https://github.com/beardix/asdf-hugo.git
asdf install
#+end_src

テーマを [[https://numixproject.github.io/][Numix]] に:

#+begin_src sh
sudo add-apt-repository ppa:numix/ppa
sudo apt install numix-blue-gtk-theme numix-icon-theme-circle -y
xfconf-query --channel xsettings --property /Net/ThemeName --set 'NumixBlue'
xfconf-query --channel xsettings --property /Net/IconThemeName --set 'Numix-Circle'
xfconf-query --channel xfwm4 --property /general/theme --set 'NumixBlue'
#+end_src

[[https://github.com/google/mozc][Mozc]] 導入:

#+begin_src sh
sudo apt install fcitx-mozc -y
im-config -n fcitx
sudo reboot
#+end_src

[[https://docs.xfce.org/panel-plugins/xfce4-clipman-plugin/start][xfce4-clipman-plugin]] 導入:

#+begin_src sh
sudo apt intall xfce4-clipman-plugin -y
#+end_src

*** 終わりに
:PROPERTIES:
:CREATED:  [2021-10-11 月 23:39]
:END:

ガッツリ作業にも使えるメイン Xubuntu 機を調達出来て満足。

今回の経験で問題無く使いものになることは分かったので、次回調達の機会があれば、
さらにスペックを上げたり、タッチディスプレイにすることにも検討したい。

** DONE Chromebook Acer Spin 311 に Emacs を入れて幸せになる
CLOSED: [2021-02-21 日 23:24]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2021-02-21
:DIR:      images/2021-02-21_acer-spin-311-emacs
:EXPORT_HUGO_BUNDLE: 2021-02-21_acer-spin-311-emacs
:EXPORT_HUGO_SLUG: acer-spin-311-emacs
:EXPORT_HUGO_TAGS: chromebook emacs acer
:END:

#+toc: headlines 2

[[https://amzn.to/2ZBcsLU][Chromebook Acer Spin 311]] を半ば衝動買いした。

当初の目的としては、電子書籍を [[https://play.google.com/store/apps/details?id=com.flyersoft.moonreaderp][Moon+ Reader Pro]] で読みつつ、
[[https://play.google.com/store/apps/details?id=com.orgzly][Orgzly]] でメモを取り、それを [[https://play.google.com/store/apps/details?id=com.nutomic.syncthingandroid][Syncthing]] で共有する、というような
Android でのユースケースを、キーボード付きのデバイスでやりたいな、というくらいだった。

実際購入してみたところ、 Linux (Debian) をシュッと立ち上げて使えるということだったので、
それならばと Emacs を使えるようにしよう、と相成った。

この Linux は本当に Debian なので、実は Chromebook 特有の何かというのはあまりなかったのだけれど、
備忘録として作業内容を記録しておく。

*** Emacs のインストール

Linux コンテナを立ち上げたらまずは更新をかける:

#+begin_src sh
sudo apt update
sudo apt upgrade
#+end_src

日本語ロケールが設定されていないので、設定しておく:

#+begin_src sh
sudo dpkg-reconfigure locales
#+end_src

Emacs や開発系のツールは新し目のを使いたいので、 nix で導入する。

こういう場合に snap や flatpak 等で入れると、
Emacs 内からリンクを開く際に既存のブラウザインスタンスが使われなかったり等の
変な挙動をするので、 nix を使うようにしている
(参考: [[https://www.reddit.com/r/emacs/comments/dj3abj/opening_urls_from_emacs_in_firefox/f4lctw7?utm_source=share&utm_medium=web2x&context=3][Opening urls from emacs in firefox : r/emacs]])。

そして、現状の ChromeOS 特有の問題として、
nix のインストールに失敗する、という物がある(参考: [[https://github.com/NixOS/nix/issues/4107][can't install nix-2.3.7 on ChromeOS linux container: operation not permitted mounting /proc · Issue #4107 · NixOS/nix]])。
ここに記載の通りワークアラウンドとして以下を実行する:

#+begin_src sh
sudo umount /proc/{cpuinfo,diskstats,meminfo,stat,uptime}
#+end_src

これで nix のインストールが出来るようになる:

#+begin_src sh
curl -L https://nixos.org/nix/install | sh
#+end_src

Emacs のインストールは以下の通り:

#+begin_src sh
nix-env -i emacs-27.1
#+end_src

インストールしたアプリを ChromeOS 側から見えるように、
以下のように設定する(参考: [[https://nixos.wiki/wiki/Installing_Nix_on_Crostini][Installing Nix on Crostini - NixOS Wiki]]):

#+begin_src sh
mkdir -p ~/.config/systemd/user/cros-garcon.service.d/
cat > ~/.config/systemd/user/cros-garcon.service.d/override.conf <<EOF
[Service]
Environment="PATH=%h/.nix-profile/bin:/usr/local/sbin:/usr/local/bin:/usr/local/games:/usr/sbin:/usr/bin:/usr/games:/sbin:/bin"
Environment="XDG_DATA_DIRS=%h/.nix-profile/share:%h/.local/share:/usr/local/share:/usr/share"
EOF
#+end_src

これで一度再起動すれば、もう普通に使えるようになってしまう。

*** (おまけ)git の credential helper を設定する

GitHub のプライベートリポジトリを利用する場合等には、
パーソナルアクセストークンによる認証が必要になる。

Chromebook でも =gnome-keyring= を入れれば libsecret による認証ヘルパーを利用出来る。

#+begin_src sh
sudo apt install gnome-keyring -y
(cd ~/.nix-profile/share/git/contrib/credential/libsecret/ && sudo make)
git config --file ~/.gitconfig.local credential.helper ~/.nix-profile/share/git/contrib/credential/libsecret/git-credential-libsecret
#+end_src

これで、認証が必要なリポジトリをクローンしようとすると、
以下のようなダイアログが出てくるようになる:

#+attr_org: :width 500
[[file:images/2021-02-21_acer-spin-311-emacs/2021-02-21_22-11-22_screenshot.png]]

*** (おまけ)スクリーンショットの利用

上記のようなスクリーンショットは Chromebook 側で撮影したあとに
クリップボードに送信することで、 Linux 側からも =xclip= 等で普通に使えるようになる。

*** (おまけ)arm 版 hugo-extended を作る

せっかく Emacs が使えるようになったので、
ブログも Chromebook で書いてしまおうと思い、
Hugo をインストールしようとした所で引っ掛かってしまった。

現在利用しているテーマ( [[https://wowchemy.com/][Wowchemy]] )では、 Hugo の Extended 版が必要なのだが、
Spin 311 の CPU は arm であり、また Hugo 公式では arm 用の Extended バイナリを配布していない
(参考: [[https://discourse.gohugo.io/t/extended-version-for-arm/23762][Extended Version for ARM - support - HUGO]])。

そこで、 [[https://apoorv.blog/posts/install-update-hugo-extended-for-arm.html][Install Update Hugo Extended for ARM in Ubuntu | Apoorv Blog]] を参考にしつつ
(と言っても、 arm 版 go を入れて =go build --tags extended= しましょう、というだけだが…)、
ソースからビルドすることで対応した。

なお、 go 自体のインストールは [[https://github.com/asdf-vm/asdf][asdf]] の [[https://github.com/kennyp/asdf-golang][Go プラグイン]] を利用した。

*** 終わりに

Moon+ Reader で電子書籍を読みつつ、 Emacs でメモを取り、
Android の Syncthing で同期する、という面白い環境が出来上がった。

ついでにブログ執筆環境も整えることが出来た。
サクサク、というわけには行かないが、それほどストレスなく利用出来るし、
キーボードも案外打ち易い。
この記事自体も Chromebook で書いている。

なかなか良い買い物だったと思う。

** DONE 中古で12,800円の激安ノートPC(Jumper Ezbook 2)にXubuntu 20.04 LTS (Focal Fossa)を入れて幸せになる :xubuntu:jumper:ezbook:
CLOSED: [2020-06-18 木 06:18]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-06-15
:DIR:      images/2020-06-15_jumper-ezbook2-xubuntu
:EXPORT_HUGO_BUNDLE: 2020-06-15_jumper-ezbook2-xubuntu
:EXPORT_HUGO_SLUG: jumper-ezbook2-xubuntu
:END:

#+toc: headlines 2

*** 経緯

先日近所のブックオフでこんなものを見つけた。

#+attr_org: :width 200
[[file:images/2020-06-15_jumper-ezbook2-xubuntu/2020-06-15_06-23-44_IMG_20200131_142511.jpg]]

値札によると、 Jumper の Ezbook というものらしい。
多分 [[https://garumax.com/jumper-ezbook-2-review][こちらで紹介されてる]] もの。

珍しく英語配列キーボードで、 Windows 10 もついて Windows 10 単体より安い。
ということで購入を決めた。

実際 [[http://www.jp.square-enix.com/ffvii-pc-jp/][FINAL FANTASY VII INTERNATIONAL for PC]] が快適に動かせる程度のスペックはあった。

とはいえ Windows は普段遣いするモノではない(≒ Emacs を快適に使えない)ので、 Xubuntu を入れることにした。

優秀なスペックとは言えないので快適というワケにはいかないが、
このブログ記事を Emacs で書きながら hugo を立ち上げ、 Gimp で画像編集をしつつ記事をプレビューする、
くらいのことは普通に出来ている。

ただキーボードの反応が悪いのはいかんともしがたい。
Ctrl(Caps Lock)とスペースをよく押し損じる。
真ん中のところを押すように意識すればいいので、慣れてくれば、まあ使えないこともない…。

珍しく 14 インチで、そこそこ軽いというのもあり、
雑に持ち歩けるエディタ環境という点では一定の価値があるかなー、という感じ。

以下、使えるようにするまでの道程を紹介する。

*** インストール用 SSD の外付け

せっかく Windows 10 が入ってるので、それは活かしておきたい。

ということで、昔使っていたノート PC に入っていた [[https://amzn.to/2AF9cpO][TOSHIBA の SSD]] を、
[[https://amzn.to/30RRxpF][玄人志向 HDDケース]] で外付けドライブ化して使うことにした。

相当不恰好にはなるが、適当な面ファスナーで背面に貼り付けている。

#+attr_org: :width 500
[[file:images/2020-06-15_jumper-ezbook2-xubuntu/2020-06-17_03-58-14_IMG_20200617_035604.jpg]]

USB 3.0 ポートを使っているからか、それほどパフォーマンスの問題は感じない。
元々、期待するようなスペックではないというのが大きいが…。

ちなみに最初は、 SSD なら何でも良かろうと思って [[https://amzn.to/3fu9DCb][コンパクトなエレコムの外付けSSD]] で試したが、
こちらは速度が遅くて使いものにならなかった。 Xubuntu のインストールに丸一日かかるレベル。

*** Xubuntu インストール

起動用の USB ドライブの作り方は [[file:/2020/02/13/macbookpro10-xubuntu/][以前の記事]] と同様。

作成した USB ドライブから起動出来るようにするには BIOS の設定を変える必要がある。

起動直後の以下の画面で =ESC= を押す。

#+attr_org: :width 400
[[file:images/2020-06-15_jumper-ezbook2-xubuntu/boot.jpg]]

すると BIOS 設定画面が開くので、 =→= キーで =Boot= タブを開く。

#+attr_org: :width 400
[[file:images/2020-06-15_jumper-ezbook2-xubuntu/bios.jpg]]

=Boot Option Priorities= というのが起動順を指定する設定。
=#1= を選択して USB ドライブを指定する。

後は、普通にインストール。
パーティション指定は面倒だったので、外付けドライブ全てを =/= にした。
これでも特に問題は無さそう。

*** Ezbook 用の Tweak

Ezbook は実はトラックパッドに特殊なキー操作が割り当たっていて、意図せず暴発するのでこれを無効にする。
具体的には上端から下へスワイプすると =Super+Down= が押下されたことになる。
これがデフォルトでは =Tile window to the bottom= に割り当たっているので、
=xfwm4-settings= を立ち上げてショートカットを削除する。

ちなみに、右端から左へのスワイプは =Super+A= に、
下端から上へスワイプは =Super+B= に、
左端から右へスワイプは =Super+TAB= にそれぞれ割り当てられている。
これらのキーはデフォルトでは特にアサインされていなさそう。

次に、 [[https://wiki.archlinux.org/index.php/Xmodmap#Turn_CapsLock_into_Control][xmodmap - ArchWiki]] を参考にキーマップを修正する。

Ezbook に限らず、 Caps Lock は Ctrl に割り当てたいので以下を =~/.Xmodmap= に設定する:

#+begin_example
clear lock
clear control
keycode 66 = Control_L
add control = Control_L Control_R
#+end_example

即反映するには =xmodmap ~/.Xmodmap= する。

また、 Ezbook では MacBook で =/= があるところに =Delete= があり、
MacBook で =option= があるところに =\= があり使い辛くてしょうがないので、
=Delete= を =/= にする設定をする:

#+begin_example
keycode 119 = backslash bar backslash bar
#+end_example

最後に、トラックパッドのスクロール方向が直感に反するので、 =xfce4-mouse-settings= を立ち上げ、
=Reverse scroll direction= にチェックを入れる。

*** Xubuntu の初期設定

まずはターミナルから Emacs キーバインドを有効にする:

#+begin_src sh
xfconf-query --channel xsettings --property /Gtk/KeyThemeName --set Emacs
#+end_src

キーボードショートカットでいつでもターミナルを出せるようにしておく:

#+begin_src sh
xfconf-query --channel xfce4-keyboard-shortcuts --property '/commands/custom/<Primary>minus' --create --type string --set 'xfce4-terminal --drop-down --hide-menubar --hide-toolbar --hide-scrollbar'
#+end_src

簡易 Spotlight 的な:

#+begin_src sh
xfconf-query --channel xfce4-keyboard-shortcuts --property '/commands/custom/<Primary><Alt>space' --create --type string --set 'xfce4-appfinder -c'
#+end_src

キーリピート設定をする:

#+begin_src sh
xfconf-query --channel keyboards --property '/Default/KeyRepeat/Delay' --create --type int --set 350
xfconf-query --channel keyboards --property '/Default/KeyRepeat/Rate' --create --type int --set 20
#+end_src

[[http://manpages.ubuntu.com/manpages/trusty/man1/numlockx.1.html][numlockx]] の設定をする:

#+begin_src sh
echo NUMLOCK=off | sudo tee /etc/default/numlockx
#+end_src

[[https://docs.brew.sh/Homebrew-on-Linux][Linuxbrew]] を入れる:

#+begin_src sh
sudo add-apt-repository ppa:git-core/ppa -y
sudo apt update
sudo apt install curl git -y

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
sudo apt-get install build-essential -y
echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' >> ${HOME}/.profile
eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
brew install gcc
#+end_src

zsh を入れる:

#+begin_src sh
brew install zsh
#+end_src

Git の認証ヘルパー等の設定をする:

#+begin_src sh
sudo apt-get install libsecret-1-0 libsecret-1-dev -y
(cd /usr/share/doc/git/contrib/credential/libsecret/ && sudo make)
git config --file ~/.gitconfig.local user.name yewton
git config --file ~/.gitconfig.local user.email yewton@gmail.com
git config --file ~/.gitconfig.local credential.helper /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
#+end_src

ターミナル環境の必需品([[https://github.com/zplug/zplug][zplug]], [[https://github.com/thoughtbot/rcm][rcm]] , [[https://github.com/junegunn/fzf][fzf]] , [[https://github.com/clvv/fasd][fasd]] , [[https://github.com/tmux/tmux/wiki][tmux]] , [[https://github.com/powerline/powerline][powerline]] , [[https://github.com/astrand/xclip][xclip]], [[https://github.com/direnv/direnv][direnv]]) を入れる:

#+begin_src sh
wget -qO - https://apt.thoughtbot.com/thoughtbot.gpg.key | sudo apt-key add -
echo "deb https://apt.thoughtbot.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/thoughtbot.list
sudo apt-get update

sudo apt install rcm fzf fasd tmux powerline xclip direnv -y
curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh

echo 'source /usr/share/doc/fzf/examples/key-bindings.zsh' >> ${HOME}/.fzf.zsh
echo 'source /usr/share/doc/fzf/examples/completion.zsh' >> ${HOME}/.fzf.zsh
#+end_src

[[https://github.com/miiton/Cica][プログラミング用日本語等幅フォント Cica(シカ)]] をインストール:

#+begin_src sh
wget https://github.com/miiton/Cica/releases/download/v5.0.1/Cica_v5.0.1_with_emoji.zip
unzip Cica_v5.0.1_with_emoji.zip
sudo mv *.ttf /usr/local/share/fonts/
sudo fc-cache -fv
#+end_src

[[https://github.com/yewton/.dotfiles][.dotfiles]] を入れ、シェルを変更し、一度ログアウトする:

#+begin_src sh
git clone https://github.com/yewton/.dotfiles.git
RCRC=~/.dotfiles/rcrc rcup
rcup -t ubuntu

echo $(which zsh) | sudo tee -a /etc/shells
chsh -s $(which zsh)
#+end_src

[[http://www.orgzly.com/][Orgzly]] のノートを [[https://syncthing.net/][Syncthing]] で同期しているので、 Syncthing をインストールする。
=syncthing-gtk= を入れると自動起動の設定が楽:

#+begin_src sh
curl -s https://syncthing.net/release-key.txt | sudo apt-key add -
echo "deb https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list
sudo apt update
sudo apt install syncthing syncthing-gtk -y
#+end_src

[[https://app-updates.agilebits.com/product_history/CLI][1Password CLI]] をインストール:

#+begin_src sh
wget https://cache.agilebits.com/dist/1P/op/pkg/v1.1.0/op_linux_amd64_v1.1.0.zip
unzip op_linux_amd64_v1.1.0.zip
mv op ~/bin/
eval $(op signin my)
#+end_src

1Password CLI の JSON を扱うのに便利な [[https://github.com/Blacksmoke16/oq][Blacksmoke16/oq]] を入れる:

#+begin_src sh
snap oq
#+end_src

Firefox アカウントを取得するにはこんな感じ:

#+begin_src sh
op get item 'Firefox Account' | oq -r '.details.fields[]|select(.name=="username")|.value' | tr -d '\n' | pbcopy
op get item 'Firefox Account' | oq -r '.details.fields[]|select(.name=="password")|.value' | tr -d '\n' | pbcopy
op get totp 'Firefox Account' | pbcopy
#+end_src

[[https://www.gnu.org/software/emacs/][GNU Emacs]] と関連パッケージをインストール:

#+begin_src sh
sudo apt install build-essential texinfo aspell ripgrep cmigemo sqlite3 -y
sudo add-apt-repository ppa:kelleyk/emacs -y
sudo apt update
sudo apt install emacs26 -y
#+end_src

[[https://github.com/yewton/.emacs.d][.emacs.d]] や個人設定をインストールする:

#+begin_src sh
git clone https://github.com/yewton/.emacs.d.git
echo -e "(setq custom-file \"~/.emacs.local/init.el\")\n(load custom-file)" > ~/.emacs.d/custom.el
#+end_src

Emacs 外での日本語入力のため [[https://github.com/google/mozc][Mozc]] をインストールして設定:

#+begin_src sh
sudo apt install -y fcitx-mozc
im-config -n fcitx

sudo reboot # 一度再起動する

fcitx-config-gtk3 # 設定 GUI が立ち上がる
#+end_src

[[https://asdf-vm.com/#/][asdf vm]] 本体とプラグインをインストール:

#+begin_src sh
brew install asdf
asdf plugin add ruby
asdf plugin add python
asdf plugin add nodejs
asdf plugin add golang
asdf plugin add hugo https://github.com/beardix/asdf-hugo
bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-release-team-keyring'
asdf install
#+end_src

素敵なアイコンテーマ [[https://github.com/numixproject/numix-icon-theme-circle][numix-icon-theme-circle]] をインストール:

#+begin_src sh
sudo apt install numix-icon-theme-circle
#+end_src

アイコンテーマ以外も含めて、全部 [[https://numixproject.github.io/][Numix]] にするとよろしい:

#+begin_src sh
xfce4-appearance-settings
xfwm4-settings
sudo lightdm-gtk-greeter-settings
#+end_src

[[https://github.com/dylanaraps/neofetch][dylanaraps/neofetch]] をインストール:

#+begin_src sh
sudo apt install neofetch -y
#+end_src

** DONE Lenovo Tab M8 が案外良かった                               :Lenovo__Tab__M8:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 2020-01-08_lenovo-tab-m8
:EXPORT_HUGO_SLUG: lenovo-tab-m8
:EXPORT_DATE: 2020-01-11
:DIR:      images/2020-01-08_lenovo-tab-m8
:END:

@@hugo:{{< lastmod >}}@@

さすがにもう [[file:/2017/04/09/grouper-beanstalk/][Nexus 7 2012]] でやっていくのはしんどくなってきたので、手軽なタブレットを探していたら、
2019 年の 11 月に Lenovo から [[https://hb.afl.rakuten.co.jp/hgc/1a0d625b.bdb81d38.1a0d625c.bf0332b2/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbiccamera%2F4580550700484%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fbiccamera%2Fi%2F12780179%2F&link_type=hybrid_url&ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MCwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjB9][Lenovo Tab M8 (ZA5G0084JP)]] が発売されていたのを知った。

2 万を切る価格で、 Android 9 、クアッドコアでメモリは 2 GB 、
ディスプレイは 8.0 型ワイド IPS パネル (1280x800ドット)と、そこそこ使えそうなスペック。

ただストレージは 16GB と心許ないので、 microSD による拡張は必須(最大128GBまで)。
自分はたまたま持ってた [[https://amzn.to/2QJFCF8][SanDisk 製の microSDXC カード]] を使っている。
アプリ最適化対応じゃないので少々もっさりはするけれど、使えない程ではない。 

電子書籍が読めればいいやというくらいの気持ちで購入したのだけれど、意外なことに *音がいい* 。

確かに [[https://www.lenovo.com/jp/ja/tablets/android-tablets/tab-series/Lenovo-Tab-M8-2nd-Gen-HD/p/ZZITZTATB58][公式サイト]] には以下のようにあるけれども、正直期待していなかった。

#+begin_quote
鮮やかでシームレスな映像表示を実現する狭額縁による高画面占有率83％のマルチタッチ対応の8.0型ワイドIPSパネル、ドルビーオーディオ対応のオーディオ機能を搭載。鮮明な映像と臨場感のあるサウンドで、お気に入りのビデオのストリーミングやモバイルゲームを楽しめます。
#+end_quote

[[https://amzn.to/2T4dbTB][Sony WH-XB900N]] を Bluetooth 接続で聴いているが、手持ちの Pixel 3 XL に繋いだ場合と比較すると結構違う。
そんなに大した耳を持ってるわけじゃないけど、低音がすごく心地良く響く感じ。

イコライザは以下のように設定している:

#+downloaded: file:/Users/yewton/Downloads/drive-download-20200107T213252Z-001/Screenshot_2020-01-08-01-02-47-757.jpeg @ 2020-01-09 06:10:17
#+attr_org: :width 500
#+caption: Dolby Audio のイコライザ設定
[[file:images/2020-01-08_lenovo-tab-m8/2020-01-09_06-10-17_Screenshot_2020-01-08-01-02-47-757.jpeg]]

意外と音が良いので色々やりたくなってしまい、年末にセールしていた [[https://play.google.com/store/apps/details?id=com.square_enix.android_googleplay.FFT_jp2&hl=ja][FINAL FANTASY TACTICS 獅子戦争]] を買ってしまった。
割と快適に動くので読書よりもゲームをやってしまう…。

#+downloaded: file:/Users/yewton/Downloads/drive-download-20200107T213252Z-001/Screenshot (2020_01_08 6_12_13).jpg @ 2020-01-09 08:36:49
#+attr_org: :width 500
#+caption: いつまでもゼクラス砂漠から出られない一行
[[file:images/2020-01-08_lenovo-tab-m8/2020-01-09_08-36-49_Screenshot (2020_01_08 6_12_13).jpg]]

そんなわけで案外良かった Lenovo Tab M8 だがおかしな挙動もあり、
まず *再起動すると必ず「SDカードが見つからない」旨の通知が表示される* 。

そして、 *スクリーンショットの動作が安定しない* 。上記の現象もスクリーンショットが保存できなかった。

一番うっとうしいのが、 *横画面になる度に Lenovo Launcher が停止する* こと。停止する度にダイアログが出るので邪魔。
とはいえ「アプリを閉じる」を選択してしまえば以降差し支えなく使用は可能。

#+attr_org: :width 600
#+caption: 横画面になる度に表示されるうっとうしいダイアログ
[[file:images/2020-01-08_lenovo-tab-m8/2020-01-08_06-36-20_Screenshot_2020-01-08-01-02-37-802.jpeg]]

@@hugo:{{< callout note >}}@@
2020年1月20日に配信されたアップデートを適用したところ、
少なくとも =Lenovo Launcher が停止しました= のダイアログは出なくなっていた。
@@hugo:{{</ callout >}}@@

@@hugo:{{< unsplash leading="Featured image background by" id=" estherrj" name=" Esther Jiao" >}}@@
* 技術系                                                                  :@技術系:

** DONE MacBook Pro (Retina, 15-inch, Mid 2012) で macOS と Xubuntu 19.10 Eoan Ermine をデュアルブートする :macos:ubuntu:xubuntu:xfce:hidpi:
CLOSED: [2020-02-13 木 07:01]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-02-13
:DIR:      images/2020-02-13_macbookpro10-xubuntu
:EXPORT_HUGO_BUNDLE: 2020-02-13_macbookpro10-xubuntu
:EXPORT_HUGO_SLUG: macbookpro10-xubuntu
:END:

#+begin_src yaml :front_matter_extra t
image:
  caption: Background image by <a href="https://pixabay.com/users/bharathsiddamjetix37-3810891/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1844603">Bharat Siddam</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1844603">Pixabay</a>
#+end_src

#+toc: headlines 2

*** 前提

- MacBook Pro の種類は [[https://support.apple.com/kb/SP653?locale=ja_JP][15インチMacBook Pro Retinaディスプレイモデル：2.6GHz]]
  - OS は [[https://support.apple.com/ja-jp/HT206886][OS X El Capitan]]
- Xubuntu は [[https://xubuntu.org/news/xubuntu-19-10-released/][Xubuntu 19.10 Eoan Ermine]]
  - 目玉は =improved HiDPI support=

*** パーティションの分割

まず *[[https://support.apple.com/ja-jp/HT204837][FileVault]] が有効な状態ではパーティション操作が出来ない* ので、システム設定から解除する。
解除するだけで数時間かかるので気長に待つ。

FileVault の無効化が済んだら、 [[https://support.apple.com/ja-jp/guide/disk-utility/welcome/mac][Mac 用ディスクユーティリティ]] を使って Xubuntu インストール用のパーティションを用意する。

初期状態だとパーティション作成メニューが選択出来ないので、
[[https://apple.stackexchange.com/questions/304131/no-partition-scheme-option-when-erasing-a-usb-disk-in-macos-high-sierra][No partition scheme option when erasing a USB disk in MacOS High Sierra? - Ask Different]] を参考に
全てのデバイスを表示し、 *ボリュームではなくディスクを選択* する。

今回は単純に半分を mac に、もう半分を Xubuntu で使うように二等分した。
パーティション追加時の初期状態のまま。

このパーティション分割も数時間かかるので気長に待つ。

*** 起動用USBドライブの作成

=xubuntu-19.10-desktop-amd64.iso= を [[https://xubuntu.org/download][Xubuntu 公式サイト]] からダウンロードする。

[[https://ubuntu.com/tutorials/tutorial-create-a-usb-stick-on-macos][Create a bootable USB stick on macOS | Ubuntu]] を参考に、 [[https://www.balena.io/etcher/][Etcher]] で上記の OS イメージを焼く。

用意したのは容量 2GB という骨董品レベルの USB スティックドライブだったが、問題なく動いた。

*** Xubuntu インストール

[[https://support.apple.com/ja-jp/HT202796][Startup Manager]] を起動し、上記の起動USBドライブを挿入する。

すると下の画像のように黄色い =EFI Boot= という名前のドライブが出現するので、
これを選択する。

何故か二つ出現することがあるのだが、どちらを選んでも大丈夫そうだった。

#+attr_org: :width 500
[[file:images/2020-02-13_macbookpro10-xubuntu/2020-02-13_04-45-56_startup-manager.jpg]]

*初期状態では Wi-Fi が使えない* はずなので、 [[https://amzn.to/2OPxvW3][Rankie の有線LAN アダプタ]] など
ドライバのインストール不要な適当な USB イーサネットアダプタを用意しておく必要がある。

インストール時に
=グラフィックスとWi-Fiハードウェアと追加のメディアフォーマットのサードパーティ製ソフトウェアをインストールする= をチェックしておくと、
初回起動時から Wi-Fi が使えるようになる模様。

いずれにしても有線環境は必要。

[[https://help.ubuntu.com/community/SwapFaq][SwapFaq - Community Help Wiki]] を参考に以下のように =swap= パーティションだけ用意したが、
別に要らなかったかもしれない。あとから [[https://wiki.archlinux.org/index.php/Swap#Swap_file][SwapFile]] を追加することも出来るようだし。

=ブートローダをインストールするデバイス= は Xubuntu のルートパーティションを選択した。

#+attr_org: :width 1000
[[file:images/2020-02-13_macbookpro10-xubuntu/2020-02-13_04-47-05_IMG_20200211_045148.jpg]]

インストール完了後はデフォルトで Xubuntu が起動するようになる。

変えたくなったら再び Startup Manager を起動すればよい。

*** Xubuntu 初期設定

**** キーテーマをEmacs風(macOS風)にする

#+begin_src sh
xfconf-query -c xsettings -p /Gtk/KeyThemeName -s Emacs
#+end_src

**** タッチパッドの設定(ナチュラルスクロール、水平スクロール)

以下のようなシェルスクリプトを作成し、 =セッションと起動= メニューからログイン時に実行するように設定する。

#+caption: =fix_scroll.sh=
#+begin_src sh
#!/usr/bin/env bash

synclient VertScrollDelta=-$(synclient | grep VertScrollDelta | awk '{print $3}')
synclient HorizTwoFingerScroll=1
synclient HorizScrollDelta=-$(synclient | grep HorizScrollDelta | awk '{print $3}')
#+end_src

**** キーボードの設定(ファンクションキーの有効化)

#+begin_src sh
echo 'options hid_apple fnmode=2' | sudo tee -a /etc/modprobe.d/hid_apple.conf
#+end_src

**** macOS Dock 風のランチャ(Plank)

シンプルな Dock 風のランチャ [[https://launchpad.net/plank][Plank]] をインストールし、 =セッションと起動= メニューからログイン時に実行するように設定する。

#+begin_src sh
sudo apt install plank
#+end_src

**** Alfred, Spotlight 風のランチャ(Albert)

[[https://www.alfredapp.com/][Alfred]] や [[https://support.apple.com/ja-jp/HT204014][Spotlight]] のような使い心地のランチャ [[https://albertlauncher.github.io/][Albert]] をインストールし、 =セッションと起動= メニューからログイン時に実行するように設定する。

#+begin_src sh
curl https://build.opensuse.org/projects/home:manuelschneid3r/public_key | sudo apt-key add -
echo 'deb http://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_19.10/ /' | sudo tee /etc/apt/sources.list.d/home:manuelschneid3r.list
apt update
apt install albert
#+end_src

**** Cica フォントの追加

[[https://github.com/miiton/Cica][miiton/Cica: プログラミング用日本語等幅フォント Cica(シカ)]] をインストールする。

#+begin_src sh
wget https://github.com/miiton/Cica/releases/download/v5.0.1/Cica_v5.0.1_with_emoji.zip
unzip Cica_v5.0.1_with_emoji.zip
sudo mv *.ttf /usr/local/share/fonts/
sudo fc-cache -fv
#+end_src

**** asdf のインストールと設定

[[https://asdf-vm.com/#/core-manage-asdf-vm][asdf]] をインストールし、プラグインに必要なパッケージをインストールする。

#+begin_src sh
sudo apt install \
  automake autoconf libreadline-dev \
  libncurses-dev libssl-dev libyaml-dev \
  libxslt-dev libffi-dev libtool unixodbc-dev \
  unzip curl \
  libbz2-dev libreadline-dev libsqlite3-dev -y
#+end_src

**** Emacs のインストールと設定

[[https://www.gnu.org/software/emacs/][GNU Emacs]] をインスールし、利用するパッケージをインストールする。

#+begin_src sh
sudo apt install build-essential texinfo aspell ripgrep cmigemo -y
sudo snap install emacs --classic
#+end_src

**** ターミナル関連の設定

#+begin_src sh
wget -qO - https://apt.thoughtbot.com/thoughtbot.gpg.key | sudo apt-key add -
echo "deb https://apt.thoughtbot.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/thoughtbot.list
sudo apt-get update
sudo apt install rcm curl fzf fasd tmux powerline -y
curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
#+end_src

fzf は =/usr/share/doc/fzf/README.Debian= にある指示に従う。

**** git の認証ヘルパ設定

#+begin_src sh
sudo apt-get install libsecret-1-0 libsecret-1-dev
(cd /usr/share/doc/git/contrib/credential/libsecret/ && sudo make)
echo -e "\n[credential]\n helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret\n" >> ~/.gitconfig.local
#+end_src

**** HiDPI への対応

***** 全般

=外観= メニューで =設定= タブの =ウィンドウ拡大縮小= を =2倍= に設定する。

#+attr_org: :width 500
[[file:images/2020-02-13_macbookpro10-xubuntu/2020-02-13_06-59-55_Screenshot_2020-02-13_06-59-30.png]]

=/etc/environment= に以下を追記する。

#+begin_src sh
GDK_SCALE=2
QT_AUTO_SCREEN_SCALE_FACTOR=0
QT_SCALE_FACTOR=2
#+end_src

***** Emacs

フォントサイズが小さいままなので、サイズ指定を倍にすることで暫定対応。

ただ、画像やモードラインの高さなどが小さいままなので、対応検討中。

***** GIMP

テーマ設定でフォントを大きくするしかない。

#+begin_src sh
cp -r /usr/share/gimp/2.0/themes/Dark ~/.config/GIMP/2.10/themes/MyDark
#+end_src

等で元になるテーマをコピーし、以下のような指定を追記(コメントアウトを解除)する。

#+begin_src conf
gtk-font-name = "Noto Sans Regular 18"
font_name = "Noto Sans Regular 18"
#+end_src

*** 参考にしたリンク集

- [[https://apple.stackexchange.com/questions/304131/no-partition-scheme-option-when-erasing-a-usb-disk-in-macos-high-sierra][No partition scheme option when erasing a USB disk in MacOS High Sierra? - Ask Different]]
- [[https://blog.b-shock.org/2018/03/03/Xubuntu-MacBook-Air/][MacBook AirをXubuntuとのデュアルブートにした。 | b-shock. Fortress]]
- [[https://ubuntu.com/tutorials/tutorial-create-a-usb-stick-on-macos][Create a bootable USB stick on macOS | Ubuntu]]
- [[https://wiki.archlinux.org/index.php/HiDPI][HiDPI - ArchWiki]]
- [[https://wiki.archlinux.org/index.php/MacBookPro10,x][MacBookPro10,x - ArchWiki]]
- [[http://esperas.info/index.php?QBlog-20180312-2][macでUSB起動したxubuntuでWiFiを使えた！ - そよ風ブログ - esperas! エスペラントの世界]]
- [[https://help.ubuntu.com/community/SwapFaq][SwapFaq - Community Help Wiki]]
- [[https://www.maketecheasier.com/install-dual-boot-ubuntu-mac/][How to Install and Dual-Boot Ubuntu on Mac - Make Tech Easier]]
- [[https://askubuntu.com/questions/149971/how-do-you-remap-a-key-to-the-caps-lock-key-in-xubuntu][How do you remap a key to the Caps Lock key in Xubuntu? - Ask Ubuntu]]
- [[https://www.ubuntuupdates.org/ppa/google_chrome][UbuntuUpdates - PPA: Google Chrome]]
- [[https://askubuntu.com/questions/690512/how-to-enable-natural-scrolling-in-xfce4][xubuntu - How to enable natural scrolling in xfce4? - Ask Ubuntu]]
- [[https://bugzilla.xfce.org/show_bug.cgi?id=11193][11193 – GTK3 apps don't understand natural scrolling]]
- [[https://askubuntu.com/questions/440670/how-do-i-enable-horizontal-scroll-on-lubuntu-desktop][touchpad - How do I enable horizontal scroll on lubuntu desktop - Ask Ubuntu]]
- [[https://docs.xfce.org/apps/terminal/dropdown][apps:terminal:dropdown [Xfce Docs]​]]
- [[https://qiita.com/yuji38kwmt/items/cffc3507e0cbd0b76454][Xubuntu: `xdg-user-dirs-gtk-update`でユーザーディレクトリが英語名になったけど、なぜか`デスクトップ`ディレクトリが英語にならない - Qiita]]
- [[https://github.com/albertlauncher/albert/issues/793][Ubuntu 19.04 package · Issue #793 · albertlauncher/albert]]
- [[https://unix.stackexchange.com/questions/121395/on-an-apple-keyboard-under-linux-how-do-i-make-the-function-keys-work-without-t][On an Apple Keyboard under Linux, how do I make the Function keys work without the fn modifier key? - Unix & Linux Stack Exchange]]

* Emacs                                                              :@Emacs:
** DONE consult-ripgrep と migemo を組み合わせて ripgrep でもローマ字日本語検索 :migemo:ripgrep:consult:emacs:
CLOSED: [2022-02-07 月 23:29]
:PROPERTIES:
:EXPORT_FILE_NAME:   index
:EXPORT_DATE:        2022-02-07
:DIR:                images/2022-02-07_consult-ripgrep-migemo
:EXPORT_HUGO_BUNDLE: 2022-02-07_consult-ripgrep-migemo
:EXPORT_HUGO_SLUG:   consult-ripgrep-migemo
:END:

[[/2022/02/07/consult-ripgrep-migemo/][consult-ripgrep と migemo を組み合わせて ripgrep でもローマ字日本語検索]] の派生。

*** TL;DR

#+begin_src emacs-lisp
(defun consult--migemo-regexp-compiler (input type)
  (setq input (mapcar #'migemo-get-pattern (consult--split-escaped input)))
  (cons (mapcar (lambda (x) (consult--convert-regexp x type)) input)
        (when-let (regexps (seq-filter #'consult--valid-regexp-p input))
          (lambda (str)
            (consult--highlight-regexps regexps str)))))
(setq migemo-options '("--quiet" "--nonewline" "--emacs"))
(setq consult--regexp-compiler #'consult--migemo-regexp-compiler)
#+end_src

*** =cosult-ripgrep= の仕組み

=consult-ripgrep= で指定する文字列は、 [[https://github.com/minad/consult/blob/1a6ed29e92f00266daff4ff5f62602f53ef7d158/consult.el#L4311-L4318][こちら]] にあるように構造化されている。

特に =#first#second= といった指定の場合に、
デフォルトでは区切り文字の前半(例の =first= の部分)は基本的にそのまま =rg= に渡され、
後半(例の =second= の部分)は =rg= の結果について更に Emacs 上で絞り込む、といった挙動になる
( 基本的に、と書いたのは Emacs の正規表現から =rg= に渡せる正規表現に変換してくれるという
=counsel-rg= と同じ似たような機構が備わっているから。[[https://github.com/minad/consult/blob/1a6ed29e92f00266daff4ff5f62602f53ef7d158/consult.el#L571-L590][この辺]] )。

後者については [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion-Styles.html][=completion-styles=]] の指定通りの補完スタイルが適用される為、
[[https://nyoho.jp/diary/?date=20210615][consultをmigemoizeしたい (未完→だいたいできた) - ワタタツの日記!(2021-06-15)]] の記事にあるように
=completion-styles= を設定していれば migemo が使用されるが、
前者については =consult-ripgrep= 独自の仕組みなので =completion-styles= には影響されない。

*** =consult--regexp-compiler=

[[https://github.com/minad/consult/blob/1a6ed29e92f00266daff4ff5f62602f53ef7d158/consult.el#L4306-L4309][consult-grep の DOCSTRING]] に以下の記載がある:

#+begin_quote
In order to disable transformations of the grep input, adjust `consult--regexp-compiler' accordingly.
#+end_quote

[[https://github.com/minad/consult/blob/1a6ed29e92f00266daff4ff5f62602f53ef7d158/consult.el#L592-L602][デフォルトの実装]] はこんな感じ:

#+begin_src emacs-lisp
(defun consult--default-regexp-compiler (input type)
  "Compile the INPUT string to a list of regular expressions.
The function should return a pair, the list of regular expressions and a
highlight function. The highlight function should take a single argument, the
string to highlight given the INPUT. TYPE is the desired type of regular
expression, which can be `basic', `extended', `emacs' or `pcre'."
  (setq input (consult--split-escaped input))
  (cons (mapcar (lambda (x) (consult--convert-regexp x type)) input)
        (when-let (regexps (seq-filter #'consult--valid-regexp-p input))
          (lambda (str)
            (consult--highlight-regexps regexps str)))))
#+end_src

入力文字列から最終的に =rg= に渡される文字列を組み立てているここに、介入余地がある。

ということで、冒頭のような設定を行い、 migemo 対応版の =consult--regexp-compiler= を指定してやればよい。

{{{begin_callout(warning)}}}
=consult--regexp-compiler= はその命名からも分かる通り、あくまで内部変数のようである。
その為、今後の更新によって使えなくなる可能性も十分にある。
{{{end_callout}}}

** DONE avy で migemo る (avy-migemo を使わずに)                  :migemo:avy:emacs:
CLOSED: [2020-05-31 日 05:31]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-05-31
:DIR:      images/2020-05-31_avy-migemo
:EXPORT_HUGO_BUNDLE: 2020-05-31_avy-migemo
:EXPORT_HUGO_SLUG: avy-migemo
:END:

*** TL;DR

#+begin_src emacs-lisp
(require 'avy)
(require 'migemo)

(defun avy-goto-migemo-timer (&optional arg)
  (interactive "P")
  (let ((avy-all-windows (if arg
                             (not avy-all-windows)
                           avy-all-windows)))
    (avy-with avy-goto-migemo-timer
      (setq avy--old-cands (avy--read-candidates #'migemo-get-pattern))
      (avy-process avy--old-cands))))
(add-to-list 'avy-styles-alist '(avy-goto-migemo-timer . pre))
(global-set-key (kbd "C-M-'") 'avy-goto-migemo-timer)
#+end_src

*** 背景

[[file:/2020/05/21/migemo-ivy/][以前の記事]] を書いた時点では [[https://github.com/abo-abo/avy][avy]] を使っていなかったが、改めて調べると超絶便利だったので使うことにした。

そして当然の帰結として、 [[http://0xcc.net/migemo/][Migemo]] に対応させたくなった。

[[https://github.com/momomo5717/avy-migemo][avy-migemo]] の存在は以前から知っていたけれど、色々な機能が提供されていてよく分からなかったのと、
自分がやりたいユースケースだけ考えると複雑な仕組みは要らなさそうに思えたので、
改めて =avy= の仕組みを調べて設定しようと考えた。

*** やりたき事

=avy= には色々な使い方がある。

1文字だけで候補を表示したり、2文字まで入力出来るようにしたり。
一定時間以内に入力された文字を候補とする、というような機能もある。

=migemo= との組み合わせを考えると、固定の文字数よりは任意の文字数入力出来るのが望ましい。

上記を踏まえると、 
*一定時間以内に入力された文字を migemo に食わせて得られた正規表現にマッチする物を候補とする*
ような動きが実現出来るとよさそうだった。

*** =avy-goto-char-timer=

=avy= に組込まれている「一定時間以内に入力された文字を候補とする」関数定義を見てみる:

#+begin_src emacs-lisp
(defun avy-goto-char-timer (&optional arg)
  "Read one or many consecutive chars and jump to the first one.
The window scope is determined by `avy-all-windows' (ARG negates it)."
  (interactive "P")
  (let ((avy-all-windows (if arg
                             (not avy-all-windows)
                           avy-all-windows)))
    (avy-with avy-goto-char-timer
      (setq avy--old-cands (avy--read-candidates))
      (avy-process avy--old-cands))))
#+end_src

案外短い。

キモは =avy--read-candidates= で、こいつはオプショナルで文字列から正規表現を作る関数を指定出来る。
ここで =migemo-get-pattern= を食わせてやればいい。

*** migemo を使って候補を表示する独自関数

というわけで冒頭の独自関数を定義する:

#+begin_src emacs-lisp
(defun avy-goto-migemo-timer (&optional arg)
  (interactive "P")
  (let ((avy-all-windows (if arg
                             (not avy-all-windows)
                           avy-all-windows)))
    (avy-with avy-goto-migemo-timer
      (setq avy--old-cands (avy--read-candidates #'migemo-get-pattern))
      (avy-process avy--old-cands))))
#+end_src

=avy-goto-char-timer= をほんの一部書き換えただけ。

デフォルトだと候補のキーは文字に重ねて表示されるが、
migemo で引っ掛けたいような文字は入力した文字とは異なる場合が多い。
そのため重ねずに前方に表示するようにしたいため、明示的にスタイルを設定しておく:

#+begin_src emacs-lisp
(add-to-list 'avy-styles-alist '(avy-goto-migemo-timer . pre))
#+end_src

** DONE counsel-rg と migemo を組み合わせて ripgrep でもローマ字検索 :migemo:ripgrep:ivy:emacs:
CLOSED: [2020-05-25 月 06:51]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-05-24
:DIR:      images/2020-05-24_counsel-rg-migemo
:EXPORT_HUGO_BUNDLE: 2020-05-24_counsel-rg-migemo
:EXPORT_HUGO_SLUG: counsel-rg-migemo
:END:

[[file:/2020/05/21/migemo-ivy/][Ivy (Swiper) で雑に migemo を使う]] の続編。併せて参照のコト。

*** TL;DR

#+begin_src emacs-lisp
(setq migemo-options '("--quiet" "--nonewline" "--emacs"))
(setq ivy-re-builders-alist '((t . ivy--regex-plus)
                              (counsel-rg . ytn-ivy-migemo-re-builder)
                              (swiper . ytn-ivy-migemo-re-builder)))
#+end_src

*** counsel-rg の仕組み

Emacs で使える正規表現と rg に渡せる正規表現は異なるのに、
そもそも一体どうやって =counsel-rg= が実現されているかを確認した。

すると、 =counsel--elisp-to-pcre= という関数で、
Emacs 式正規表現を [[https://www.pcre.org/][PCRE (Perl Compatible Regular Expressions)]] にベストエフォートで変換してくれている。

*** migemo(cmigemo) が出力する正規表現と、 PCRE 非互換の問題

デフォルトでは以下のような正規表現が出力される:

#+begin_example
$ cmigemo -d '/usr/local/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict' --quiet --emacs --word wagahai
\(ﾜ\s-*ｶ\s-*ﾞ\s-*ﾊ\s-*ｲ\|ワ\s-*ガ\s-*ハ\s-*イ\|吾\s-*\(輩\|が\s-*輩\)\|我\s-*\(輩\|が\s-*輩\)\|わ\s-*が\s-*は\s-*い\|ｗ\s-*ａ\s-*ｇ\s-*ａ\s-*ｈ\s-*ａ\s-*ｉ\|w\s-*a\s-*g\s-*a\s-*h\s-*a\s-*i\)
#+end_example

これは、空白や改行を挟んでいてもマッチするようにするため。

この =\s-= というのは Emacs 独自のもので、シンタックステーブルを利用したマッチの仕組み:

#+begin_quote
#+begin_example
‘\sCODE’
     matches any character whose syntax is CODE.  Here CODE is a
     character that represents a syntax code: thus, ‘w’ for word
     constituent, ‘-’ for whitespace, ‘(’ for open parenthesis, etc.  To
     represent whitespace syntax, use either ‘-’ or a space character.
     ,*Note Syntax Class Table::, for a list of syntax codes and the
     characters that stand for them.
#+end_example
#+end_quote

=\s-= は構文上ホワイトスペース扱いされる文字にマッチする。

これは当然、他の正規表現エンジンでは使えない。

PCRE では =\s= がホワイトスペースにマッチするので(参考: [[https://www.pcre.org/original/doc/html/pcrepattern.html#genericchartypes][pcrepattern specification]])、
=\s-= を =\s= で置換する、という手もあるけれど、
そもそも ripgrep や Swiper を使うときに、ホワイトスペースが間に挟まる場合を考慮したくなるということは少ないと思うので、
複数行を考慮させないようにするという方向で調整したい。

*** migemo(cmigemo) で複数行に渡る文字列を考慮しないようにする

そのものズバリなオプションが用意されている:

#+begin_quote
#+begin_example
-n --nonewline        Don't use newline match.
#+end_example
#+end_quote

このオプションを指定すると、出力される正規表現は以下のようになる:

#+begin_example
cmigemo -d '/usr/local/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict' --quiet --emasc --nonewline --word wagahai
(ﾜｶﾞﾊｲ|ワガハイ|吾(輩|が輩)|我(輩|が輩)|わがはい|ｗａｇａｈａｉ|wagahai)
#+end_example

あとは、このオプションを =migemo-options= に指定すればよい:

#+begin_src emacs-lisp
(setq migemo-options '("--quiet" "--nonewline" "--emacs"))
#+end_src

なお、すでに =migemo-init= している場合は反映されないので、その場合は一度 =migemo-kill= する必要がある。


** DONE Ivy (Swiper) で雑に migemo を使う                 :ivy:migemo:swiper:emacs:
CLOSED: [2020-05-21 木 04:50]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-05-21
:DIR:      images/2020-05-21_migemo-ivy
:EXPORT_HUGO_BUNDLE: 2020-05-21_migemo-ivy
:EXPORT_HUGO_SLUG: migemo-ivy
:END:

@@hugo:{{< lastmod >}}@@

@@hugo:{{< callout note >}}@@
[[file:/2020/05/24/counsel-rg-migemo/][counsel-rg と migemo を組み合わせて ripgrep でもローマ字検索]] も併せて参照。
@@hugo:{{</ callout >}}@@

*** TL;DR

#+begin_src emacs-lisp
(reqiure 'dash)
(require 's)

(defun ytn-ivy-migemo-re-builder (str)
  (let* ((sep " \\|\\^\\|\\.\\|\\*")
         (splitted (--map (s-join "" it)
                          (--partition-by (s-matches-p " \\|\\^\\|\\.\\|\\*" it)
                                          (s-split "" str t)))))
    (s-join "" (--map (cond ((s-equals? it " ") ".*?")
                            ((s-matches? sep it) it)
                            (t (migemo-get-pattern it)))
                      splitted))))

(setq ivy-re-builders-alist '((t . ivy--regex-plus)
                              (swiper . ytn-ivy-migemo-re-builder)))
#+end_src

*** 背景

Swiper で migemo を使おうと思ってググると [[https://github.com/momomo5717/avy-migemo][avy-migemo]] での設定例しか出てこない。

個人的には avy を使っていない(使えていない)のと、
Swiper を使いたいのに avy が絡んでくるっていうのがよく分からなかったので利用するのが憚られた。

そこで、 ivy の仕組みをちゃんと理解してやってみようと思った。

*** migemo の仕組み

migemo 自体の仕組みは超単純で、 [[http://0xcc.net/migemo/][Migemo: ローマ字のまま日本語をインクリメンタル検索]] で解説されている通り:

#+begin_quote
利用者が 1文字入力するたびに、ローマ字列から正規表現を生成して、それで検索するという力技な方法です。 
#+end_quote

この正規表現を取得するには =migemo-get-pattern= を使う:

#+begin_example
ELISP> (migemo-get-pattern "ebihurai")
"\\(ｴ\\s-*ﾋ\\s-*ﾞ\\s-*ﾌ\\s-*ﾗ\\s-*ｲ\\|エ\\s-*ビ\\s-*フ\\s-*ラ\\s-*イ\\|海\\s-*老\\s-*フ\\s-*ラ\\s-*イ\\|え\\s-*び\\s-*ふ\\s-*ら\\s-*い\\|ｅ\\s-*ｂ\\s-*ｉ\\s-*ｈ\\s-*ｕ\\s-*ｒ\\s-*ａ\\s-*ｉ\\|e\\s-*b\\s-*i\\s-*h\\s-*u\\s-*r\\s-*a\\s-*i\\)"
#+end_example

*** ivy の仕組み

=ivy-read= という関数が、入力からいい感じの正規表現を使って検索してくれるフロントエンド。

そこで使われる正規表現は、 =ivy-alist-setting= を通して =ivy-re-builders-alist= から取得される。

Swiper の場合はこんな感じ:

#+begin_src emacs-lisp
(ivy-read
                 "Swiper: "
                 candidates
                 :initial-input initial-input
                 :keymap swiper-map
                 :preselect preselect
                 :require-match t
                 :update-fn #'swiper--update-input-ivy
                 :unwind #'swiper--cleanup
                 :action #'swiper--action
                 :re-builder #'swiper--re-builder
                 :history 'swiper-history
                 :caller 'swiper)
#+end_src

migemo を使いたいのは今のところ Swiper だけなので、 ='swiper= をキーにして独自関数を設定すればいい。

#+begin_src emacs-lisp
(setq ivy-re-builders-alist '((t . ivy--regex-plus)
                              (swiper . ytn-ivy-migemo-re-builder)))
#+end_src

*** migemo を使って検索する独自関数

Swiper はスペースで区切って雑に絞り込んでいけるというのが最大の(個人的な)メリットなので、
最低限それを実現出来ればよかった。

実は =!= で exclude を実現出来たり色々他にも気の効いた機能があるみたいだけれど、
自分は使っていない(そこまで使いこなせてない)。

なので、空白や正規表現っぽい入力は as-is にして、
それ以外の入力を migemo に食わせてやり、
最後に空白を =.*?= に変換して結合した文字列を最終的な正規表現とする。

というのを実現しようとするとこんな感じになる:

#+begin_src emacs-lisp
(defun ytn-ivy-migemo-re-builder (str)
  (let* ((sep " \\|\\^\\|\\.\\|\\*")
         (splitted (--map (s-join "" it)
                          (--partition-by (s-matches-p " \\|\\^\\|\\.\\|\\*" it)
                                          (s-split "" str t)))))
    (s-join "" (--map (cond ((s-equals? it " ") ".*?")
                            ((s-matches? sep it) it)
                            (t (migemo-get-pattern it)))
                      splitted))))
#+end_src


** DRAFT Emacs の info の使い方いつも忘れる
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-10
:DIR:      images/2020-01-10_emacs-info
:EXPORT_HUGO_BUNDLE: 2020-01-10_emacs-info
:EXPORT_HUGO_SLUG: emacs-info
:END:

** TODO ox-hugo と academic の素晴らしさ
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-24
:DIR:      images/2020-01-24_ox-hugo-academic
:EXPORT_HUGO_BUNDLE: 2020-01-24_ox-hugo-academic
:EXPORT_HUGO_SLUG: ox-hugo-academic
:END:

logdone 入れないと当日公開に出来ないかも？
 https://ox-hugo.scripter.co/doc/dates/#date

#+begin_src yaml :front_matter_extra t
image:
  caption: Background image by
#+end_src

** DRAFT org-mode column view で clock した結果を集計
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_columns-clocksum
:EXPORT_HUGO_BUNDLE: 2020-01-09_columns-clocksum
:EXPORT_HUGO_SLUG: columns-clocksum
:END:

#+begin_src org
,#+COLUMNS:  %40ITEM %TODO %CLOCKSUM %JIRA
#+end_src

** DRAFT ox-hugo の src block caption はどこから来てるのか
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-10
:DIR:      images/2020-01-10_ox-hugo-src-block-caption
:EXPORT_HUGO_BUNDLE: 2020-01-10_ox-hugo-src-block-caption
:EXPORT_HUGO_SLUG: ox-hugo-src-block-caption
:END:

[[file:~/.emacs.d/var/el-get/org-mode/lisp/ox.el::("Listing" ("ar" :default "برنامج") ("cs" :default "Program") ("da" :default "Program") ("de" :default "Programmlisting") ("es" :default "Listado de programa") ("et" :default "Loend") ("fr" :default "Programme" :html "Programme") ("it" :default "Listato") ("ja" :default "ソースコード")][koko]]

** DRAFT org-mode で祝日とか
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-10
:DIR:      images/2020-01-10_org-mode-holidays-anniversaries
:EXPORT_HUGO_BUNDLE: 2020-01-10_org-mode-holidays-anniversaries
:EXPORT_HUGO_SLUG: org-mode-holidays-anniversaries
:END:

#+begin_src org
,* 記念日 
,#+CATEGORY: omochi
%%(org-date 2020 1 8) omochi 記念日
%%(diary-anniversary 1 8 2019) omochi %d 歳記念日
#+end_src

** DONE org-mode に Chrome で開いてるページへのリンクを貼りたい                :emacs:org__mode:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-10
:DIR:      images/2020-01-09_org-mode-web-link
:EXPORT_HUGO_BUNDLE: 2020-01-09_org-mode-web-link
:EXPORT_HUGO_SLUG: org-mode-web-link
:END:

=org-mode= のリンクマークアップはちょっと特殊で、エスケープの仕様も独特です。

また、  [[https://code.orgmode.org/bzg/org-mode/src/release_9.3/etc/ORG-NEWS][2019年の12月にリリースされたバージョン 9.3 で後方互換性の無い仕様変更が入る]] ということも有りました。

#+begin_quote
*Version 9.3*

*Incompatible changes*

Change bracket link escaping syntax
Org used to percent-encode sensitive characters in the URI part of the bracket links.

Now, escaping mechanism uses the usual backslash character, according to the following rules, applied in order:
#+end_quote

#+caption[=org-mode=]: (参考) =org-mode= 9.3 でのエスケープ実装
#+begin_src emacs-lisp
(defun org-link-unescape (link)
  "Remove escaping backslash characters from string LINK."
  (replace-regexp-in-string
   (rx (group (one-or-more "\\")) (or string-end (any "[]")))
   (lambda (_)
     (concat (make-string (/ (- (match-end 1) (match-beginning 1)) 2) ?\\)))
   link nil t 1))
#+end_src

こういう背景もあり、 =org-mode= の外で工夫して =org-mode= 形式のリンクを生成するよりは、
 =org-mode= 自体に任せてしまうのが安心です。

[[https://github.com/rexim/org-cliplink][org-cliplink]] というパッケージもありますが、これだとログインが必要なページへのリンクは
(Basic 認証を設定していなければ)生成出来ません。

もっと手軽に、 Chrome で見ているページへのリンクを挿入する手段として、
[[https://github.com/ku/CreateLink][CreateLink]] という Chrome 拡張機能を使う方法があります。

以下のように改行区切りでコピーするような設定を追加します:

#+begin_example
%text%%newline%%url%
#+end_example

CreateLink の =%text%= は改行をスペースに変換する仕様になっているので、区切り文字として改行を利用するのは安全なハズです。

そして、以下のような独自関数を定義します:

#+begin_src emacs-lisp
(require 's)

(defun ytn-org-insert-weblink ()
  (interactive)
  (let* ((pair (s-split "\n" (with-temp-buffer (clipboard-yank) (buffer-string))))
         (desc (first pair))
         (link (second pair)))
    (insert (org-make-link-string link desc))))
#+end_src

単純に改行で区切って =org-make-link-string= に渡すだけです。

これを、個人的には ~M-L~ にアサインしています([[https://github.com/jwiegley/use-package][use-package]] の =bind-key= を利用しています):

#+begin_src emacs-lisp
(bind-key "M-L" #'ytn-org-insert-weblink org-mode-map)
#+end_src

以上、ちょっとした小ネタでした。

** DRAFT auto-commit-and-push のこと書きたい
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_auto-commit-and-push
:EXPORT_HUGO_BUNDLE: 2020-01-09_auto-commit-and-push
:EXPORT_HUGO_SLUG: auto-commit-and-push
:END:

#+caption: .dir-locals.el
#+begin_src emacs-lisp
((nil . ((eval git-auto-commit-mode 1)
         (gac-automatically-push-p . t))))
#+end_src

=git-auto-commit-mode= は autoload されるので、 autoload が適切に扱われていれば =require= は不要。

** DRAFT org-download と ox-hugo を組み合わせて記事への画像挿入を快適にする :emacs:ox__hugo:org__download:org__attach:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_org-download-ox-hugo
:EXPORT_HUGO_BUNDLE: 2020-01-09_org-download-ox-hugo
:EXPORT_HUGO_SLUG: org-download-ox-hugo
:END:

#+begin_src emacs-lisp
(use-package org-download
  :after org
  :functions (org-link-escape)
  :config
  (setq org-download-method 'attach)
  (setq org-download-link-format-function
        (lambda (filename)
          (format org-download-link-format
                  (org-link-escape
                   (funcall org-download-abbreviate-filename-function filename)))))
  (setq org-download-annotate-function
        (lambda (link)
          (format "#+DOWNLOADED: %s @ %s\n#+ATTR_ORG: :width 500\n"
                  (if (equal link org-download-screenshot-file)
                      "screenshot"
                    link)
                  (format-time-string "%Y-%m-%d %H:%M:%S"))))
  (add-hook 'dired-mode-hook 'org-download-enable))

(use-package org
  :config
  (setq org-use-property-inheritance '("DIR")))

(require 's)
(defun ytn-new-post-template ()
  (let* ((slug (read-string "Slug: "))
         (now (current-time))
         (export-date (format-time-string "%Y-%m-%d" now))
         (id (format "%s_%s" export-date slug)))
    (s-lex-format "\
,* DRAFT %?
:PROPERTIES:
:EXPORT_FILE_NAME:   index
:EXPORT_DATE:        ${export-date}
:DIR:                images/${id}
:EXPORT_HUGO_BUNDLE: ${id}
:EXPORT_HUGO_SLUG:   ${slug}
:END:")))

(setq org-capture-templates '(("n" "サイト用")
                              ("np" "New post" entry (file+headline "~/Projects/yewton.net/content-org/all-posts.org" "Inbox")
                               (function ytn-new-post-template) :empty-lines 1 :prepend t)
                              ))
#+end_src

** DRAFT Emacs で文字列補間(String interpolation)したい
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_s-lex-format
:EXPORT_HUGO_BUNDLE: 2020-01-09_s-lex-format
:EXPORT_HUGO_SLUG: s-lex-format
:EXPORT_HUGO_TAGS: s.el emacs
:END:

https://emacs.stackexchange.com/questions/7377/named-string-substitution

** DRAFT Emacs でマジックコメントを反映させたいとき
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_find-alternate-file
:EXPORT_HUGO_BUNDLE: 2020-01-09_find-alternate-file
:EXPORT_HUGO_SLUG: find-alternate-file
:END:

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp
;; Local Variables:
;; flycheck-disabled-checkers: (emacs-lisp emacs-lisp-checkdoc)
;; no-byte-compile: t
;; End:
#+end_src

=find-alternate-file=

#+begin_quote
Find file /FILENAME/, select its buffer, kill previous buffer.
If the current buffer now contains an empty file that you just visited
(presumably by mistake), use this command to visit the file you really want.
#+end_quote

https://superuser.com/questions/208488/how-do-i-re-open-a-file-in-emacs

** DRAFT emacs-plus で入れた Emacs が Spotlight 検索に引っかからない       :emacs:spotlight:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_emacs-plus-spotlight
:EXPORT_HUGO_BUNDLE: 2020-01-09_emacs-plus-spotlight
:EXPORT_HUGO_SLUG: emacs-plus-spotlight
:END:

https://qiita.com/delphinus/items/438046d2bbeb3e63f8fa

* Webサイト運用                                                        :@Webサイト運用:

** DONE Wowchemy 5.0.0 から 5.2.0 へのアップデート記録
CLOSED: [2021-06-02 水 00:44]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2021-06-02
:DIR:      images/2021-06-02_wowchemy-500-to-520
:EXPORT_HUGO_BUNDLE: 2021-06-02_wowchemy-500-to-520
:EXPORT_HUGO_SLUG: wowchemy-500-to-520
:END:

*** 背景

[[https://wowchemy.com/blog/v5.1.0/][2021年5月4日に 5.1.0]] が、[[https://wowchemy.com/blog/v5.2.0/][同年5月26日に 5.2.0]] が、それぞれ発表された。

[[file:/2021/02/28/academic4-to-wowchemy5/][前回]] で [[https://gohugo.io/hugo-modules/][Hugo Modules]] への対応が済んでいるので、サクッとアップデート出来るようになった。

多少、後方互換性の無い変更があるので、対応の記録を残す。

*** アップデート手順

まず、 Hugo 自体を、対応最新バージョンである v0.83.1 に上げる
( [[https://github.com/wowchemy/wowchemy-hugo-modules/releases/tag/v5.2.0][リリースノート]] によると、 =Hugo Extended v0.81.0-v0.83.1= に対応している模様 )。

=netlify.toml= の変更も忘れずに。

その後、リリースノートに記載の通り以下を実行する:

#+begin_src sh
hugo mod get github.com/wowchemy/wowchemy-hugo-modules/wowchemy@89d079b
hugo mod get github.com/wowchemy/wowchemy-hugo-modules/wowchemy-cms@89d079b
#+end_src

これだけだと、 =go.sum= にゴミが残るので、更に [[https://gohugo.io/commands/hugo_mod_tidy/][hugo mod tidy]] しておくとよい。

[[https://wowchemy.com/blog/v5.1.0/#apply-breaking-changes][Wowchemy v5.1.0 の Apply Breaking Changes]] に従い、以下を行う:

- =assets/images/= を =assets/media/= にリネーム
- デフォルトソーシャルシェア用画像の名前を =assets/media/sharing.*= に設定し、 =sharing_image= の設定を =config.yaml= から削除
- =static/media/= 以下のメディアファイルを、 Hugo のメディア処理システムの対象になるように =assets/media/= に移動する

以上で、アップデートは完了となる。簡単!

** DONE Academic 4.8.0 から Wowchemy 5.0.0 へのアップデート記録
CLOSED: [2021-02-28 日 00:37]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2021-02-27
:DIR:      images/2021-02-27_academic4-to-wowchemy5
:EXPORT_HUGO_BUNDLE: 2021-02-27_academic4-to-wowchemy5
:EXPORT_HUGO_SLUG: academic4-to-wowchemy5
:END:

#+toc: headlines 2

*** 背景

2021年2月25日に Wowchemy (旧 Academic) の 5.0.0 正式版が[[https://wowchemy.com/blog/v5.0.0/][発表された]]。
4.8 が2020年3月だったので、実に1年ぶりのアップデートとなる。

Academic から Wowchemy にリブランディングされただけではなく、
後方互換性の無い大幅な変更が行われている。

*** アップデート手順

公式には [[https://wowchemy.com/blog/v5.0.0-beta.0/][Beta 0]]、[[https://wowchemy.com/blog/v5.0.0-beta.1/][Beta 1]]、[[https://wowchemy.com/blog/v5.0.0-beta.2/][Beta 2]]、[[https://wowchemy.com/blog/v5.0.0-beta.3/][Beta 3]] を順に辿るとよい、
とあるものの、実際のところ先の変更が後で無意味になったりしたので、
改めてまとめる。

まず、最大の変更点である [[https://gohugo.io/hugo-modules/][Hugo Modules]] への対応。

1.13 以上の go をインストールした後に、
Wowchemy が対応しているバージョンの Hugo を入れる。

これがパッと分からなかったのだけれど、
[[https://wowchemy.com/blog/v5.0.0-beta.3/][Beta 3 のリリースノート]] から Hugo 0.80.0 が最新動作確認版であることが分かり、
また git 上で [[https://github.com/wowchemy/wowchemy-hugo-modules/tree/v5.0.0][5.0.0]] と [[https://github.com/wowchemy/wowchemy-hugo-modules/tree/v5.0.0-beta.3][Beta 3]] の指す先が同じであることから、
5.0.0 でも Hugo 0.80.0 が使えることが分かった。

例によって extended 版が必要なので、
もし arm 版が欲しい場合は https://github.com/gohugoio/hugo/tree/v0.80.0 から zip をダウンロードしたのちに
自身でビルドする必要がある:

#+begin_src sh
go build --tags extended
#+end_src

用意が出来たら、従来のテーマを削除する:

#+begin_src sh
git submodule deinit themes/academic
git rm themes
#+end_src

そして、 =config/_default/config.toml= から =theme = "academic"= の記述を削除し、
以下を最下部に追加する:

#+begin_src toml
[module]
  [[module.imports]]
    path = "github.com/wowchemy/wowchemy-hugo-modules/wowchemy-cms"
  [[module.imports]]
    path = "github.com/wowchemy/wowchemy-hugo-modules/wowchemy"
#+end_src

その後に、モジュールを初期化する:

#+begin_src sh
hugo mod init github.com/yewton/yewton.net
#+end_src

これだと開発版が入ってしまうため、特定バージョンを入れ直す。

Wowchemy のドキュメントにはコミットハッシュ指定で入れるように書いてあるので、
何でバージョン指定出来ないんだろう、と思い調べてみたところ、
どうやらバージョン指定で入れられるようなモジュール設定になっていないらしかった
(参考: [[https://devlights.hatenablog.com/entry/2019/12/20/132730][Goメモ-35 (モジュールのメジャーバージョンを２以降にした場合の取り扱い方について) - いろいろ備忘録日記]] )。

というわけで 5.0.0 のコミットを指定して入れる…と、
ここで罠があって、 *コメント機能を使っている場合、以下の不具合の為にエラーになる* :

[[https://github.com/wowchemy/wowchemy-hugo-modules/pull/2165][fix: comment provider never found by arhohuttunen · Pull Request #2165 · wowchemy/wowchemy-hugo-modules]]

そのため、この修正が取り込まれたコミットを指定してやる:

#+begin_src sh
hugo mod clean
hugo mod get github.com/wowchemy/wowchemy-hugo-modules/wowchemy@3cf9f6c
hugo mod get github.com/wowchemy/wowchemy-hugo-modules/wowchemy-cms@3cf9f6c
hugo mod tidy
#+end_src

画像置き場が =/static/img/= =/static/media/= に変わるので、
合わせてリネーム+置換を行う。
自分は [[https://github.com/dajva/rg.el][rg.el]] の wgrep でシュッとやってしまった。

以降、細かい非互換変更への対応。

=content/authors/admin/_index.md= の =name= を =title= に置換する。

=config/_default/params.toml= に以下を追加する:

#+begin_src toml
# Content Management System
[cms]
 # Enable the admin panel. See https://wowchemy.com/docs/install/
 branch = "master"
 local_backend = false

# Icon Pack Extensions
[icon.pack]
 ai = true  # Enable the Academicons icon pack https://jpswalsh.github.io/academicons/
#+end_src

また、 =search=, =comments=, =map= の設定キー =engine= が =provider= に変わり、
また設定値が数値から文字列に変わっている。これもそれぞれ変更が必要。

記事中での =alert= ショートコードが非推奨になるので、 =callout= に一括置換。

以上で移行は完了した。

*** (おまけ)Chromebook でローカルサーバーにアクセス出来ないとき

[[https://chromebooker.net/topics/qzy312ksxc/][Chromebookでローカルサーバーを立てる | Chromebook情報ポータル「chromebooker」]] にある通り、
=localhost= でアクセス出来るときもあるのだけれど、出来なくなる場合もある
(たぶん初回だけアクセス出来る？)。

そんな時は昔ながらの http://penguin.linux.test:1313/ でアクセスすれば良いのだけれど、
デフォルトでは hugo server は =127.0.0.1= にバインドしているのでそのままでは拒否される。

以下のように全アクセスを許可してやれば良い(信頼出来るネットワークなら):

#+begin_src sh
hugo server -DF --bind 0.0.0.0
#+end_src

*** 終わりに

終わってみれば、大した手間もかからずに移行出来た。

とはいえ、公式ドキュメントだけだと若干引っ掛かる部分もあったので、
この記録が誰かの役に立てば幸い。

** DRAFT Academic テーマへの移行手順                              :emacs:hugo:ox_hugo:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 2020-01-25_migrate-to-hugo-academic
:EXPORT_HUGO_SLUG: random
:EXPORT_DATE: 2019-01-05
:END:

org-mode ではタグにハイフンを付けられない。

=ox_hugo= ~hoge~

conf-toml がある https://github.com/dryman/toml-mode.el/issues/14

#+begin_src emacs-lisp
(use-package ox-hugo
  :after ox
  :init
  (defalias 'toml-mode 'conf-toml-mode)
  :config 
  (setq org-hugo-use-code-for-kbd t))
#+end_src

https://github.com/sourcethemes/academic-scripts に page bunlde 化するスクリプトがある。

#+begin_src sh
asdf plugin add hugo https://github.com/beardix/asdf-hugo
#+end_src


=baseurl= を設定しないと Twitter Card などが表示されないので気をつけよう

#+begin_src toml
# The URL of your site.
# End your URL with a `/` trailing slash, e.g. `https://example.com/`.
baseurl = "https://www.yewton.net/"
#+end_src

=google_tag_manager= が設定されていると Google Analytics のコードが埋め込まれない
https://spectrum.chat/academic/help/google-analytics-not-working-for-me~3e802803-663f-4b38-8d6f-bc645935da26?authed=true

*** ox-hugo alias

#+begin_example
:EXPORT_HUGO_ALIASES: /2019/01/happy-new-year/
#+end_example


*** hugo-academic のデフォが removePathAccents=true な注意

サーチコンソール
ゲーム感想 → ケーム感想になってた
** DONE Hugo Academic でダーク・ライト両モードに対応した Chroma によるシンタックスハイライト :emacs:chroma:hugo:academic:
CLOSED: [2020-01-24 金 08:37]
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-23
:DIR:      images/2020-01-23_hugo-academic-dark-light-code-block
:EXPORT_HUGO_BUNDLE: 2020-01-23_hugo-academic-dark-light-code-block
:EXPORT_HUGO_SLUG: hugo-academic-dark-light-code-block
:END:

#+begin_src yaml :front_matter_extra t
image:
  caption: Background image by <a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@markusspiske?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Markus Spiske"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewBox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"></path></svg></span><span style="display:inline-block;padding:2px 3px">Markus Spiske</span></a>
#+end_src

#+toc: headlines 2

*** 前提

[[https://sourcethemes.com/academic/][Academic テーマ]] のデフォルト設定は [[https://sourcethemes.com/academic/docs/writing-markdown-latex/#code-highlighting][ドキュメントにもある通り]] [[https://highlightjs.org/][highlight.js]] を使ったもので、
この仕組みに乗っておけば基本的には問題ありません。

ただし highlight.js には一つ問題があって… *EmacsLisp に対応していません* (Lisp には対応)。
具体的には =with-eval-after-load= のような独自のマクロや、
DocString 中のクオテーションといった EmacsLisp 方言には対応出来ません。

一方、 Hugo 標準の [[https://gohugo.io/content-management/syntax-highlighting/][Syntax Highlighting]] は [[https://github.com/alecthomas/chroma][Chroma]] を使ったもので、
こちらは *EmacsLisp に対応しています* 。

([[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] の作者さんが過去に [[https://github.com/alecthomas/chroma/issues/43][Issue に挙げてくれていた]] 模様…感謝 🙏)

[[https://codepen.io/yewton/pen/RwNvdBz][CodePen]] と [[https://swapoff.org/chroma/playground/][Chroma Playground]] とでそれぞれの出力結果を比べてみるとよく分かります:

#+caption: 元のコード
#+begin_src emacs-lisp
(defvar hoge "fuga"
  "Doc String 中の `QUOTE' はどうなるかな？")

(with-eval-after-load 'foo
  (unless (eq t nil) "EmacsLisp 独自キーワードはどうなるかな？")
#+end_src

#+attr_org: :width 500
#+caption: highlight.js w/ GitHub style
[[file:images/2020-01-23_hugo-academic-dark-light-code-block/2020-01-24_05-59-12_貼り付けた画像_2020_01_24_5_58.png]]

#+attr_org: :width 500
#+caption: Chroma w/ GitHub style
[[file:images/2020-01-23_hugo-academic-dark-light-code-block/2020-01-24_05-56-58_貼り付けた画像_2020_01_24_5_56.png]]

そこで、 *Academic を使いつつ、 Hugo 標準のハイライトの仕組みを使いたい* というのが動機となります。


*** Academic 標準のコードハイライトを無効にする

[[https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options][ドキュメント]] に書かれている通り、 =config.toml= で =params.highlight= オプションを無効にする必要があります。

[[https://sourcethemes.com/academic/][Academic Kickstart]] をベースにしている場合、 =params.toml= で以下のように設定します:

#+caption: =params.toml=
#+begin_src toml
# Enable source code highlighting? true/false
# Documentation: https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options
highlight = false
#+end_src

*** Hugo のコードハイライトを有効にする

[[https://sourcethemes.com/academic/][Academic Kickstart]] をベースにしている場合、 =config.toml= で以下のように
Hugo のコードハイライトが無効にされていると思います:

#+begin_src toml
[markup.highlight]
  codeFences = false  # Disable Hugo's code highlighter as it conflicts with Academic's highligher.
#+end_src

これを以下のように変更します:

#+begin_src toml
[markup.highlight]
  codeFences = true
  noClasses = false
#+end_src

=noClasses = false= としているのは、 *ダーク・ライトの両方のモードに対応させるため* です。
=noClasses= が =true= の場合、スタイル指定が HTML 中に埋め込まれます。
これだとモードの変更に追従して動的にスタイルを変更するということが出来ないため、
CSS クラスだけを HTML に埋め込んでもらうようにします。

*** ダークモード用とライトモード用の Chroma スタイルを決める

[[https://xyproto.github.io/splash/docs/][Chroma Style Gallery]] ギャラリーを参考に、
*ダークモード時に使うスタイルとライトモード時に使うスタイルをそれぞれ決めます* 。
モードの切り替わりに応じて、シンタックスハイライトのスタイル自体を変更してしまいます。

選定の際の注意事項として、 *スタイルによって細かいクラス指定に対応していない場合があります* 。

具体的には、 EmacsLisp の =defvar= などは =NameBuiltin= としてパースされ、
=.nb= というクラスが指定されるのですが、これが含まれていないスタイルがいくつかあります。

参考までに、調査した結果を以下に列挙します:

**** light スタイル

***** =NameBuiltin= が含まれるもの

- [[https://xyproto.github.io/splash/docs/abap.html][abap]]
- [[https://xyproto.github.io/splash/docs/algol.html][algol]]
- [[https://xyproto.github.io/splash/docs/algol_nu.html][algol_nu]]
- [[https://xyproto.github.io/splash/docs/arduino.html][arduino]]
- [[https://xyproto.github.io/splash/docs/autumn.html][autumn]]
- [[https://xyproto.github.io/splash/docs/colorful.html][colorful]]
- [[https://xyproto.github.io/splash/docs/emacs.html][emacs]]
- [[https://xyproto.github.io/splash/docs/friendly.html][friendly]]
- [[https://xyproto.github.io/splash/docs/github.html][github]]
- [[https://xyproto.github.io/splash/docs/lovelace.html][lovelace]]
- [[https://xyproto.github.io/splash/docs/manni.html][manni]]
- [[https://xyproto.github.io/splash/docs/murphy.html][murphy]]
- [[https://xyproto.github.io/splash/docs/pastie.html][pastie]]
- [[https://xyproto.github.io/splash/docs/perldoc.html][perldoc]]
- [[https://xyproto.github.io/splash/docs/pygments.html][pygments]]
- [[https://xyproto.github.io/splash/docs/rainbow_dash.html][dash]]
- [[https://xyproto.github.io/splash/docs/solarized-light.html][light]]
- [[https://xyproto.github.io/splash/docs/tango.html][tango]]
- [[https://xyproto.github.io/splash/docs/trac.html][trac]]
- [[https://xyproto.github.io/splash/docs/vim.html][vim]]
- [[https://xyproto.github.io/splash/docs/xcode.html][xcode]]

***** =NameBuiltin= が含まれないもの

- [[https://xyproto.github.io/splash/docs/borland.html][borland]]
- [[https://xyproto.github.io/splash/docs/bw.html][bw]]
- [[https://xyproto.github.io/splash/docs/igor.html][igor]]
- [[https://xyproto.github.io/splash/docs/monokailight.html][monokailight]]
- [[https://xyproto.github.io/splash/docs/paraiso-light.html][light]]
- [[https://xyproto.github.io/splash/docs/vs.html][vs]]

**** dark スタイル

***** =NameBuiltin= が含まれるもの

- [[https://xyproto.github.io/splash/docs/api.html][api]]
- [[https://xyproto.github.io/splash/docs/dracula.html][dracula]]
- [[https://xyproto.github.io/splash/docs/native.html][native]]
- [[https://xyproto.github.io/splash/docs/solarized-dark.html][dark]]
- [[https://xyproto.github.io/splash/docs/solarized-dark256.html][dark256]]
- [[https://xyproto.github.io/splash/docs/swapoff.html][swapoff]]

***** =NameBuiltin= が含まれないもの

- [[https://xyproto.github.io/splash/docs/fruity.html][fruity]]
- [[https://xyproto.github.io/splash/docs/monokai.html][monokai]]
- [[https://xyproto.github.io/splash/docs/paraiso-dark.html][dark]]
- [[https://xyproto.github.io/splash/docs/rrt.html][rrt]]

*** Chroma 用の CSS を生成する

スタイルを決めたら以下のように CSS を生成します。
生成された CSS は標準出力に吐き出されるため、適当なファイルにリダイレクトするか、 =pbcopy= 等にパイプしてクリップボードに格納しましょう:

#+begin_src sh
hugo gen chromastyles --style=pygments
hugo gen chromastyles --style=native
#+end_src

この後多少手を加える必要があるので、やりやすいように [[https://css2sass.herokuapp.com/][CSS 2 SASS/SCSS CONVERTER]] 等で SCSS に変換しておくとよいです。

*** Academic のテーマと競合しないようにする

生成した CSS(SCSS) は [[https://sourcethemes.com/academic/docs/customization/#customize-style-css][Academic のドキュメント]] に従い =custom.css= に追加します。

ただし、Academic には標準のハイライトのためのスタイル指定があるため、
Chroma が生成したスタイル指定をそのまま組込むと若干コンフリクトします。

そこで、多少手を加えてやります。

まずライトモード時のスタイルについては、
=background-color= や =color= が指定されていない場合があるため( =pygments= 等)、
[[https://swapoff.org/chroma/playground/][Chroma Playground]] の出力結果を参考にしてスタイル指定を追加します。

また、 Academic 組込みの =code= へのスタイル指定より優先度が高くなるように、
セレクタを =pre.chroma, .chroma code= とします。

最終的に以下のようになります:

#+begin_src scss
pre.chroma, .chroma code {

    background-color: #f5f5f5;
    color: #4a4a4a;
#+end_src

次にダークモード時のスタイルについては、
基本的に =background-color= や =color= も指定されていると思うので、
セレクタのみ =.dark pre.chroma, .dark .chroma code= としてあげます。

以上で、 *Hugo Academic を使いつつ、 Chroma でシンタックスハイライト* が実現出来ました。


** DONE 無料でいい感じのバナー用背景素材をダウンロード出来るフリー画像サービス 3 選
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-13
:DIR:      images/2020-01-13_unsplash-pexels-pixabay
:EXPORT_HUGO_BUNDLE: 2020-01-13_unsplash-pexels-pixabay
:EXPORT_HUGO_SLUG: unsplash-pexels-pixabay
:END:

#+begin_src yaml :front_matter_extra t
image:
  caption: Image by <a href="https://pixabay.com/users/Sambeetarts-1339110/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1732847">Sambeet D</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1732847">Pixabay</a>
#+end_src

記事のバナー、アイキャッチ画像([[https://sourcethemes.com/academic/][Academic]] 的には [[https://sourcethemes.com/academic/docs/managing-content/#featured-image][Featured image]])があると書く時のテンションが上がるので、
出来るだけ設定するようにしたい。

でも出来るだけ手間はかけたくない…、そんな時に使っているサービスを順不同で挙げる。

なお、いずれのサービスにおいても、 =geometric= (幾何学模様)や
=abstract= (抽象的)、あるいは =network= や =programming= といったワードで検索すると、
いわゆる /いい感じ/ な画像がヒットする。

*** Unsplash

[[https://www.notion.so/][Notion]] のカバーイメージ選択欄にあったので存在を知った。

#+attr_org: :width 500
[[file:images/2020-01-13_unsplash-pexels-pixabay/2020-01-13_11-43-22_ash-edmonds-0aWZdK8nK2I-unsplash.jpg]]
@@hugo:{{< unsplash leading="Image by" id="badashphotos" name="Ash Edmonds" >}}@@

[[https://unsplash.com/license][License | Unsplash]]

[[https://help.unsplash.com/en/articles/2612315-can-i-use-unsplash-photos-for-personal-or-commercial-projects][FAQ ページ]] より引用:

#+begin_quote
The photos on Unsplash are free to use and can be used for most commercial, personal projects, and for editorial use. 
#+end_quote

*** Pexels

#+attr_org: :width 500
[[file:images/2020-01-13_unsplash-pexels-pixabay/2020-01-13_11-46-07_abstract-architecture-building-exterior-geometric-593158.jpg]]
@@hugo:{{< pexels leading="Photo by" id="scottwebb" name="Webb from Pexels">}}@@

[[https://www.pexels.com/photo-license/][License of our free stock photos - Pexels]]

[[https://www.pexels.com/ja-jp/faq/][FAQ ページ]] より引用:

#+begin_quote
Yes, all photos and videos are free for commercial use. You can use them on your commercial website, blog, product or anywhere else. 
#+end_quote

#+begin_quote
すべての写真や動画は、商業コンテンツの一部として無料で利用できます。商業用のWebサイト、ブログ、製品、その他どんな場所にでも利用可能です。
#+end_quote

*** Pixabay

#+attr_org: :width 500
[[file:images/2020-01-13_unsplash-pexels-pixabay/2020-01-23_04-30-34_social-3064515_1280.jpg]]
@@hugo:{{< pixabay >}}Image by <a href="https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3064515">Gerd Altmann</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3064515">Pixabay</a>{{< /pixabay >}}@@

[[https://pixabay.com/service/license/][Pixabay License]]

[[https://pixabay.com/service/faq/][FAQ ページ]] より引用:

#+begin_quote
You can copy, modify, distribute, and use the images, even for commercial purposes, all without asking for permission or giving credits to the artist. However, depicted content may still be protected by trademarks, publicity or privacy rights.
#+end_quote

#+begin_quote
これらの画像は、商用、非商用を問わず、コピー、改変、再配布することができます。利用に関する許諾や使用料の支払いは必要ありません。しかし、画像の中には商標やパブリシティ権、プライバシー権などに基づき保護されているものが含まれます。
#+end_quote


** DONE GitHub Pages + Cloudflare から Netlify に移行した
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-13
:DIR:      images/2020-01-13_hugo-netlify
:EXPORT_HUGO_BUNDLE: 2020-01-13_hugo-netlify
:EXPORT_HUGO_SLUG: hugo-netlify
:EXPORT_HUGO_TAGS: Hugo Netlify Cloudflare "GitHub Pages"
:END:

#+begin_src yaml :front_matter_extra t
image:
  caption: Background image by <a href="https://pixabay.com/users/PIRO4D-2707530/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1687319">PIRO4D</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1687319">Pixabay</a>
#+end_src

[[file:/2016/02/02/blog-with-hugo/][この記事にあるとおり]] 、当初このサイトは [[https://pages.github.com/][GitHub Pages]] でホストされ、
[[https://www.cloudflare.com/][Cloudflare CDN]] を利用して配信していた。

だが先日 [[file:/2020/01/06/made-with-academic/][テーマを変えた]] ときに、既に使われていないリソースがそのまま残ってしまっていることに気がついた。
単純に =/public= 以下を =git add -a= しているだけなので、明示的に消さなければ反映されなくて当然だった。

デプロイスクリプトを見直してもよかったが、 [[https://gohugo.io/][Hugo]] 自体が [[https://www.netlify.com/][Netlify]] でホストされているし、
[[https://gohugo.io/hosting-and-deployment/hosting-on-netlify/][Netlify でホストするときの公式ドキュメントも用意されている]] し、
[[https://docs.netlify.com/site-deploys/post-processing/#post-processing-features][アセットの最適化機能]] とかもついてくるし、何より [[https://www.netlify.com/pricing/][無料だし]] 、
ということで、移行することを決めた。

#+toc: headlines 2

*** デプロイ手順

[[https://gohugo.io/hosting-and-deployment/hosting-on-netlify/][公式ドキュメント]] を超ざっくり要約すると、

1. [[https://app.netlify.com/][Netlify でアカウント作成]]
2. [[https://gohugo.io/hosting-and-deployment/hosting-on-netlify/#configure-hugo-version-in-netlify][=netlify.toml=]] をドキュメントを参考に配置
3. 連携する GitHub リポジトリを選択
4. =Deploy site= ボタンをポチる

*以上。*

これだけで =hoge.netlify.com= でアクセス出来るようになる。いい時代になった。

*** ドメイン移行手順

ただドメインも移行する場合はもう一手間必要で、[[https://docs.netlify.com/domains-https/custom-domains/configure-external-dns/][Netlify の公式ドキュメント]] に従って
DNS レコードの設定をする必要がある。

[[https://www.cloudflare.com/][Cloudflare]] の場合は、以下のように Cloudflare のダッシュボードで、
各ドメインが Netlify への =CNAME= となるように設定する。

#+downloaded: file:/Users/yewton/Downloads/cloudflare.png @ 2020-01-13 15:37:38
#+attr_org: :width 500
[[file:images/2020-01-13_hugo-netlify/2020-01-13_15-37-38_cloudflare.png]]


このとき、 *=Proxy status= が =DNS only= となるように*
(雲のアイコンがオレンジではなくグレーになるように) 設定する必要がある。

さもないと、 Cloudflare の CDN 機能が間に挟まってしまい、 Netlify 側から認識されない。

なお、 *=DNS only= にした時点で Cloudflare が発行した SSL 証明書は無効になる* 。
そのため、ここからなるべく早く [[https://docs.netlify.com/domains-https/https-ssl/#certificate-service-types][Netlify 側の SSL 証明書の設定]] をした方がいい。

当サイトの場合は設定してから1時間もしない内に SSL 証明書が有効になっていた。

*** GitHub Pages で提供していたその他のリポジトリのリダイレクト設定手順

サイトだけなら以上で万事完了なのだけれど、 GitHub Pages を利用していた場合の注意点として、
=github.io= リポジトリで =CNAME= を設定していた場合、それ以外で Pages 機能を利用しているリポジトリも同様のドメインでアクセスされるようになっている。
つまり、 =github.io= を Netlify へ向けた時点で、 *それ以外のリポジトリが全てリンク切れとなる。*

そのため、適切にリダイレクトするようにしなければならない。

[[https://docs.netlify.com/routing/redirects/][Netlify の公式ドキュメント]] に従ってやればいい…と思ったのだけれど、
原因は不明だが *=netlify.toml= で設定しようとしても反映されなかった* 。

最終的な =_redirects= ファイルの内容は以下のようになった:

#+begin_src text
https://yewton-net.netlify.com/* https://www.yewton.net/:splat 301!

/swagger-top-down-playground/* https://yewton.github.io/swagger-top-down-playground/:splat 301!
/dockerfiles/*                 https://yewton.github.io/dockerfiles/:splat 301!
/kafka-doc-ja/*                https://yewton.github.io/kafka-doc-ja/:splat 301!
#+end_src


*** その後

移行ついでに [[https://developer.okta.com/blog/2019/04/11/site-security-cloudflare-netlify][How to Configure Better Web Site Security with Cloudflare and Netlify | Okta Developer]] を参考に
[[https://securityheaders.com/][Security Headers]] や [[https://www.ssllabs.com/ssltest/index.html][SSL Server Test]] で高評価になるように設定を見直したりなどした。

ただこれはあんまり理解しないで書かれてる通りやっただけなところがあるので、いつか改めて記事にしたい。

#+attr_org: :width 500
[[file:images/2020-01-13_hugo-netlify/2020-01-13_15-12-54_securityheaders.png]]

#+attr_org: :width 500
[[file:images/2020-01-13_hugo-netlify/2020-01-13_15-15-03_qualys.png]]

# Local Variables:
# org-attach-auto-tag: nil
# End:
